package provide DS9 1.0

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval xmlrpc {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc xmlrpc::YYABORT {} {
    return -code return 1
}

proc xmlrpc::YYACCEPT {} {
    return -code return 0
}

proc xmlrpc::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc xmlrpc::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc xmlrpc::yyerror {s} {
    puts stderr $s
}

proc xmlrpc::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc xmlrpc::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set xmlrpc::table {
  10:258,target 19
  22:282,target 16
  58:291,target 64
  47:270 reduce
  17:264 shift
  58:270,target 15
  58:269,target 14
  6:0,target 1
  2:0 accept
  48:274,target 18
  47:270,target 27
  17:264,target 34
  35:258 reduce
  24:267,target 22
  39:262,target 9
  14:272,target 29
  65:270 reduce
  65:269 reduce
  56:278 shift
  35:265 reduce
  43:273,target 32
  35:266 reduce
  35:265,target 8
  4:288,target 13
  15:274,target 20
  65:282 reduce
  61:274,target 66
  14:270,target 27
  59:270,target 34
  59:269,target 34
  66:273,target 30
  57:282,target 37
  44:272 shift
  3:259 shift
  44:273 shift
  5:291,target 17
  50:274,target 31
  44:274 shift
  14:270 shift
  14:271 shift
  48:270,target 18
  48:269,target 18
  14:272 shift
  55:273,target 28
  53:270 shift
  53:269 shift
  46:282,target 16
  5:270,target 15
  5:269,target 14
  25:267,target 13
  44:294,target 55
  23:266 reduce
  4:265,target 11
  23:267 reduce
  14:277 shift
  23:268 reduce
  44:273,target 42
  14:280 shift
  51:276,target 59
  62:270 reduce
  57:280,target 37
  14:282 shift
  27:274,target 19
  50:272,target 31
  53:282 shift
  63:278,target 67
  12:258,target 11
  32:270 reduce
  46:280,target 56
  44:294 goto
  16:274,target 17
  14:292 goto
  15:269,target 20
  15:270,target 20
  58:282,target 16
  53:291 goto
  37:267,target 15
  3:287 goto
  41:270 reduce
  11:266 shift
  11:267 shift
  20:258 shift
  35:258,target 8
  11:268 shift
  49:266 reduce
  49:267 reduce
  18:260,target 35
  49:268 reduce
  50:272 reduce
  45:273,target 29
  50:273 reduce
  58:280,target 63
  50:274 reduce
  28:274,target 43
  27:269,target 19
  27:270,target 19
  58:270 shift
  58:269 shift
  46:296,target 58
  6:0 reduce
  49:267,target 14
  7:0,target 2
  10:266,target 12
  0:281 shift
  16:269,target 17
  16:270,target 17
  28:293,target 44
  62:270,target 26
  14:282,target 32
  59:282,target 34
  0:283 goto
  11:289 goto
  11:290 goto
  28:272 shift
  67:270 reduce
  28:273 shift
  58:280 shift
  22:268,target 37
  28:274 shift
  37:266 reduce
  0:283,target 2
  11:289,target 24
  11:290,target 25
  28:272,target 41
  58:282 shift
  37:267 reduce
  37:268 reduce
  34:0,target 7
  48:282,target 18
  26:0,target 6
  5:282,target 16
  11:268,target 23
  31:278,target 47
  58:291 goto
  14:280,target 31
  46:270 shift
  46:269 shift
  1:285,target 7
  16:264 reduce
  0:281,target 1
  16:268 reduce
  42:276,target 52
  16:269 reduce
  16:270 reduce
  21:262,target 10
  28:293 goto
  48:280,target 18
  28:294 goto
  11:266,target 21
  46:280 shift
  16:274 reduce
  55:272 reduce
  15:282,target 20
  25:266 reduce
  55:273 reduce
  46:282 shift
  40:267,target 12
  5:270 shift
  5:269 shift
  25:267 reduce
  55:274 reduce
  25:268 reduce
  14:277,target 30
  23:268,target 16
  42:295,target 53
  16:280 reduce
  64:270 reduce
  64:269 reduce
  52:270,target 35
  52:269,target 35
  16:282 reduce
  46:291 goto
  42:274,target 50
  41:270,target 23
  5:282 shift
  46:296 goto
  15:280,target 20
  64:280 reduce
  64:282 reduce
  13:262 shift
  23:266,target 16
  29:270,target 24
  27:282,target 19
  5:291 goto
  43:272 reduce
  43:273 reduce
  43:274 reduce
  24:290,target 40
  64:270,target 36
  64:269,target 36
  16:282,target 17
  53:291,target 61
  3:287,target 10
  52:270 reduce
  52:269 reduce
  36:0 reduce
  24:268,target 23
  53:270,target 15
  53:269,target 14
  22:268 shift
  51:282,target 60
  22:269 shift
  22:270 shift
  27:280,target 19
  43:274,target 32
  35:266,target 8
  1:257,target 3
  52:282 reduce
  39:258 reduce
  61:274 shift
  16:280,target 17
  14:292,target 33
  39:262 reduce
  24:266,target 39
  10:258 shift
  22:282 shift
  40:266 reduce
  14:271,target 28
  40:267 reduce
  8:0,target 3
  66:274,target 30
  40:268 reduce
  43:272,target 32
  31:278 shift
  10:265 shift
  65:270,target 33
  65:269,target 33
  56:278,target 62
  7:0 reduce
  10:266 shift
  48:264 reduce
  12:262,target 11
  22:291 goto
  18:260 shift
  55:274,target 28
  25:268,target 13
  48:268 reduce
  54:270,target 22
  48:270 reduce
  48:269 reduce
  4:266,target 12
  19:0,target 5
  52:282,target 35
  39:258,target 9
  44:274,target 43
  48:274 reduce
  66:272,target 30
  50:273,target 31
  57:270 reduce
  57:269 reduce
  27:264 reduce
  48:280 reduce
  48:268,target 18
  55:272,target 28
  48:282 reduce
  25:266,target 13
  26:0 reduce
  27:268 reduce
  32:270,target 21
  27:269 reduce
  27:270 reduce
  10:288 goto
  37:268,target 15
  57:280 reduce
  44:272,target 54
  3:259,target 9
  27:274 reduce
  66:272 reduce
  66:273 reduce
  57:282 reduce
  66:274 reduce
  64:282,target 36
  13:262,target 26
  27:280 reduce
  27:282 reduce
  53:282,target 16
  9:282,target 18
  30:279,target 46
  45:274,target 29
  15:268,target 20
  15:264 reduce
  37:266,target 15
  45:272 reduce
  45:273 reduce
  45:274 reduce
  10:288,target 20
  15:268 reduce
  64:280,target 36
  15:269 reduce
  15:270 reduce
  49:268,target 14
  4:265 shift
  54:270 reduce
  4:266 shift
  19:0 reduce
  33:270,target 48
  48:264,target 18
  15:274 reduce
  22:291,target 38
  24:266 shift
  28:294,target 45
  24:267 shift
  38:268,target 49
  24:268 shift
  45:272,target 29
  15:280 reduce
  22:269,target 14
  22:270,target 15
  67:270,target 25
  28:273,target 42
  65:282,target 33
  15:282 reduce
  27:268,target 19
  49:266,target 14
  33:270 shift
  10:265,target 11
  63:278 shift
  12:258 reduce
  16:268,target 17
  1:286,target 8
  12:262 reduce
  15:264,target 20
  4:288 goto
  1:257 shift
  24:290 goto
  1:261 shift
  21:258 reduce
  42:274 shift
  42:275 shift
  1:263 shift
  11:267,target 22
  20:258,target 36
  42:276 shift
  2:0,target 0
  21:262 reduce
  40:268,target 12
  34:0 reduce
  1:284,target 6
  36:0,target 4
  51:276 shift
  59:270 reduce
  59:269 reduce
  42:275,target 51
  1:263,target 5
  57:270,target 37
  57:269,target 37
  8:0 reduce
  27:264,target 19
  46:291,target 57
  51:282 shift
  29:270 reduce
  60:276 shift
  40:266,target 12
  46:270,target 15
  46:269,target 14
  42:295 goto
  16:264,target 17
  1:284 goto
  23:267,target 16
  60:276,target 65
  1:285 goto
  1:286 goto
  59:282 reduce
  38:268 shift
  9:282 shift
  1:261,target 4
  21:258,target 10
  30:279 shift
}

array set xmlrpc::rules {
  9,l 288
  11,l 288
  32,l 294
  6,l 286
  28,l 293
  3,l 284
  25,l 292
  0,l 297
  22,l 292
  18,l 291
  15,l 290
  36,l 296
  12,l 289
  33,l 295
  7,l 286
  29,l 293
  30,l 294
  4,l 285
  26,l 292
  1,l 283
  23,l 292
  19,l 291
  20,l 291
  16,l 290
  37,l 296
  13,l 289
  34,l 295
  8,l 287
  10,l 288
  31,l 294
  5,l 285
  27,l 292
  2,l 284
  24,l 292
  21,l 292
  17,l 291
  14,l 290
  35,l 295
}

array set xmlrpc::rules {
  12,dc 2
  26,dc 4
  3,dc 1
  18,dc 3
  33,dc 3
  9,dc 3
  11,dc 1
  25,dc 5
  2,dc 1
  17,dc 1
  32,dc 1
  8,dc 3
  10,dc 2
  24,dc 1
  1,dc 2
  16,dc 1
  31,dc 2
  7,dc 3
  23,dc 2
  0,dc 1
  37,dc 1
  15,dc 2
  29,dc 1
  30,dc 4
  6,dc 3
  22,dc 3
  36,dc 2
  14,dc 3
  28,dc 2
  5,dc 3
  21,dc 1
  35,dc 1
  13,dc 1
  27,dc 2
  4,dc 4
  19,dc 2
  20,dc 1
  34,dc 2
}

array set xmlrpc::rules {
  7,line 59
  37,line 111
  4,line 54
  34,line 106
  1,line 47
  31,line 101
  27,line 93
  24,line 90
  21,line 86
  17,line 79
  14,line 74
  11,line 67
  9,line 65
  6,line 58
  36,line 110
  3,line 51
  33,line 105
  29,line 97
  30,line 100
  26,line 92
  23,line 88
  19,line 81
  20,line 82
  16,line 76
  13,line 71
  10,line 66
  8,line 62
  5,line 55
  35,line 107
  2,line 50
  32,line 102
  28,line 96
  25,line 91
  22,line 87
  18,line 80
  15,line 75
  12,line 70
}

array set xmlrpc::lr1_table {
  66,trans {{270 79} {271 30} {272 31} {277 32} {280 33} {282 34} {292 80}}
  35 {{18 264 2}}
  85,trans {}
  36 {{7 0 3}}
  14,trans {{270 29} {271 30} {272 31} {277 32} {280 33} {282 34} {292 35}}
  33,trans {{278 54}}
  37 {{8 {258 265 266} 3}}
  52,trans {}
  38 {{10 258 2}}
  71,trans {{269 66} {270 67} {280 82} {282 69} {291 83}}
  40 {{4 0 4}}
  39 {{9 258 2} {12 {266 267 268} 1} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0}}
  90,trans {}
  89,trans {}
  41 {{15 {266 267 268} 2}}
  18,trans {{260 37}}
  1,trans {{257 3} {261 4} {263 5} {284 6} {285 7} {286 8}}
  37,trans {}
  42 {{18 268 1} {19 268 1} {21 270 0} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0}}
  56,trans {}
  43 {{20 268 1}}
  75,trans {{270 85} {271 30} {272 31} {277 32} {280 33} {282 34} {292 86}}
  44 {{17 268 1}}
  45 {{14 {266 267 268} 2}}
  23,trans {}
  5,trans {{269 14} {270 15} {282 16} {291 17}}
  42,trans {{270 57} {271 30} {272 31} {277 32} {280 33} {282 34} {292 58}}
  46 {{9 262 3}}
  61,trans {{276 73} {282 74}}
  47 {{12 {266 267 268} 2}}
  80,trans {{270 88}}
  79,trans {}
  48 {{23 270 2}}
  50 {{32 {272 273 274} 1}}
  49 {{30 {272 273 274} 1} {31 {272 273 274} 1} {33 {269 270 282} 0} {34 {269 270 282} 0} {35 {269 270 282} 0}}
  27,trans {}
  9,trans {{282 18}}
  46,trans {}
  51 {{22 270 2} {28 {272 273 274} 1} {30 {272 273 274} 0} {31 {272 273 274} 0} {32 {272 273 274} 0}}
  65,trans {}
  52 {{29 {272 273 274} 1}}
  84,trans {}
  53 {{25 270 2} {26 270 2} {36 {269 270 280 282} 0} {37 {269 270 280 282} 0} {17 {269 270 280 282} 0} {18 {269 270 280 282} 0} {19 {269 270 280 282} 0} {20 {269 270 280 282} 0}}
  13,trans {{262 28}}
  54 {{27 270 2}}
  32,trans {{279 53}}
  51,trans {{272 64} {273 49} {274 50} {294 65}}
  55 {{18 264 3}}
  70,trans {}
  69,trans {}
  56 {{9 258 3}}
  88,trans {}
  57 {{19 268 2}}
  17,trans {{264 36}}
  0,trans {{281 1} {283 2}}
  58 {{18 268 2}}
  36,trans {}
  55,trans {}
  60 {{31 {272 273 274} 2}}
  59 {{14 {266 267 268} 3}}
  74,trans {{276 84}}
  61 {{33 {269 270 282} 1} {34 {269 270 282} 1}}
  62 {{35 {269 270 282} 1}}
  22,trans {{258 40}}
  4,trans {{265 11} {266 12} {288 13}}
  63 {{30 {272 273 274} 2} {17 274 0} {18 274 0} {19 274 0} {20 274 0}}
  41,trans {}
  60,trans {}
  59,trans {}
  64 {{22 270 3}}
  78,trans {{274 87}}
  65 {{28 {272 273 274} 2}}
  66 {{18 {269 270 280 282} 1} {19 {269 270 280 282} 1} {21 270 0} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0}}
  26,trans {{266 46} {267 24} {268 25} {290 47}}
  8,trans {}
  67 {{20 {269 270 280 282} 1}}
  45,trans {{268 59}}
  64,trans {}
  68 {{26 270 3}}
  83,trans {}
  70 {{37 {269 270 280 282} 1}}
  69 {{17 {269 270 280 282} 1}}
  12,trans {}
  71 {{25 270 3} {36 {269 270 280 282} 1} {17 {269 270 280 282} 0} {18 {269 270 280 282} 0} {19 {269 270 280 282} 0} {20 {269 270 280 282} 0}}
  31,trans {}
  72 {{18 268 3}}
  50,trans {}
  49,trans {{274 60} {275 61} {276 62} {295 63}}
  68,trans {{278 81}}
  73 {{34 {269 270 282} 2}}
  87,trans {}
  74 {{33 {269 270 282} 2}}
  16,trans {}
  75 {{18 274 1} {19 274 1} {21 270 0} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0}}
  35,trans {{270 55}}
  76 {{20 274 1}}
  54,trans {}
  73,trans {}
  77 {{17 274 1}}
  78 {{30 {272 273 274} 3}}
  21,trans {}
  3,trans {{259 9} {287 10}}
  80 {{18 {269 270 280 282} 2}}
  79 {{19 {269 270 280 282} 2}}
  40,trans {}
  39,trans {{266 56} {267 24} {268 25} {290 47}}
  81 {{26 270 4}}
  58,trans {{270 72}}
  10 {{4 0 2} {5 0 2} {9 258 0} {10 258 0} {11 258 0}}
  77,trans {}
  82 {{25 270 4}}
  11 {{9 262 1} {10 262 1} {12 {266 267 268} 0} {13 {266 267 268} 0} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0}}
  83 {{36 {269 270 280 282} 2}}
  25,trans {}
  12 {{11 262 1}}
  7,trans {}
  84 {{33 {269 270 282} 3}}
  44,trans {}
  13 {{6 0 2}}
  85 {{19 274 2}}
  63,trans {{269 75} {270 76} {282 77} {291 78}}
  14 {{18 264 1} {19 264 1} {21 270 0} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0}}
  82,trans {{278 89}}
  86 {{18 274 2}}
  15 {{20 264 1}}
  11,trans {{266 23} {267 24} {268 25} {289 26} {290 27}}
  87 {{30 {272 273 274} 4}}
  30,trans {{272 48} {273 49} {274 50} {293 51} {294 52}}
  29,trans {}
  16 {{17 264 1}}
  88 {{18 {269 270 280 282} 3}}
  48,trans {}
  0 {{0 0 0} {1 0 0}}
  17 {{7 0 2}}
  90 {{18 274 3}}
  89 {{25 270 5}}
  67,trans {}
  1 {{1 0 1} {2 0 0} {3 0 0} {4 0 0} {5 0 0} {6 0 0} {7 0 0}}
  18 {{8 {258 265 266} 2}}
  86,trans {{270 90}}
  15,trans {}
  2 {{0 0 1}}
  19 {{5 0 3}}
  20 {{9 258 1} {10 258 1} {12 {266 267 268} 0} {13 {266 267 268} 0} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0}}
  34,trans {}
  3 {{4 0 1} {5 0 1} {8 {258 265 266} 0}}
  21 {{11 258 1}}
  53,trans {{269 66} {270 67} {280 68} {282 69} {291 70} {296 71}}
  4 {{6 0 1} {9 262 0} {10 262 0} {11 262 0}}
  22 {{4 0 3}}
  72,trans {}
  5 {{7 0 1} {17 264 0} {18 264 0} {19 264 0} {20 264 0}}
  23 {{10 262 2}}
  20,trans {{266 38} {267 24} {268 25} {289 39} {290 27}}
  19,trans {}
  2,trans {}
  6 {{1 0 2}}
  24 {{14 {266 267 268} 1} {15 {266 267 268} 1} {17 268 0} {18 268 0} {19 268 0} {20 268 0}}
  38,trans {}
  7 {{2 0 1}}
  25 {{16 {266 267 268} 1}}
  57,trans {}
  8 {{3 0 1}}
  26 {{9 262 2} {12 {266 267 268} 1} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0}}
  76,trans {}
  9 {{8 {258 265 266} 1}}
  27 {{13 {266 267 268} 1}}
  24,trans {{268 41} {269 42} {270 43} {282 44} {291 45}}
  6,trans {}
  28 {{6 0 3}}
  43,trans {}
  29 {{19 264 2}}
  30 {{22 270 1} {23 270 1} {28 {272 273 274} 0} {29 {272 273 274} 0} {30 {272 273 274} 0} {31 {272 273 274} 0} {32 {272 273 274} 0}}
  62,trans {}
  31 {{24 270 1}}
  81,trans {}
  10,trans {{258 19} {265 20} {266 21} {288 22}}
  32 {{25 270 1} {26 270 1}}
  28,trans {}
  33 {{27 270 1}}
  47,trans {}
  34 {{21 270 1}}
}

array set xmlrpc::token_id_table {
  286,t 1
  286 methodResponse
  280,title _DATA
  279,title DATA
  264,line 17
  292,line 84
  287 methodName
  270,t 0
  269,t 0
  288 params
  290 param
  289 xparam
  276,line 34
  265,title PARAMS
  291,t 1
  291 value
  284,title {}
  292 type
  274,t 0
  261,line 13
  293 members
  288,line 64
  257,t 0
  294 member
  270,title _VALUE
  269,title VALUE
  295,t 1
  295 name
  288,title {}
  273,line 31
  296 values
  278,t 0
  297 start'
  257,line 8
  262,t 0
  285,line 53
  274,title _MEMBER
  293,title {}
  283,t 1
  270,line 26
  269,line 25
  297,line 112
  259,title METHODNAME
  260,title _METHODNAME
  266,t 0
  278,title _ARRAY
  297,title {}
  282,line 42
  287,t 1
  error error
  271,t 0
  264,title _FAULT
  266,line 20
  294,line 99
  283,title {}
  292,t 1
  278,line 37
  error,line 45
  275,t 0
  268,title _PARAM
  287,title {}
  258,t 0
  263,line 16
  291,line 78
  error,title {}
  296,t 1
  280,t 0
  279,t 0
  275,line 33
  273,title MEMBER
  292,title {}
  263,t 0
  259,line 10
  260,line 11
  287,line 61
  258,title _METHODCALL
  284,t 1
  277,title ARRAY
  296,title {}
  272,line 29
  267,t 0
  263,title FAULT
  288,t 1
  284,line 49
  282,title string
  272,t 0
  268,line 23
  296,line 109
  267,title PARAM
  293,t 1
  286,title {}
  257 METHODCALL_
  281,line 41
  276,t 0
  258 _METHODCALL_
  259,t 0
  259 METHODNAME_
  260 _METHODNAME_
  260,t 0
  272,title _STRUCT
  261 METHODRESPONSE_
  265,line 19
  297,t 1
  293,line 95
  291,title {}
  262 _METHODRESPONSE_
  281,t 0
  263 FAULT_
  277,line 36
  257,title METHODCALL
  264 _FAULT_
  264,t 0
  276,title _NAME
  265 PARAMS_
  295,title {}
  262,line 14
  266 _PARAMS_
  290,line 73
  289,line 69
  285,t 1
  267 PARAM_
  0,t 0
  0 {$}
  262,title _METHODRESPONSE
  268 _PARAM_
  268,t 0
  281,title string
  274,line 32
  270 _VALUE_
  269 VALUE_
  error,t 0
  271 STRUCT_
  290,t 1
  289,t 1
  272 _STRUCT_
  258,line 9
  286,line 57
  273,t 0
  273 MEMBER_
  266,title _PARAMS
  285,title {}
  274 _MEMBER_
  275 NAME_
  271,line 28
  294,t 1
  276 _NAME_
  277,t 0
  277 ARRAY_
  271,title STRUCT
  290,title {}
  289,title {}
  283,line 46
  278 _ARRAY_
  261,t 0
  280 _DATA_
  279 DATA_
  281 HEADER_
  267,line 22
  295,line 104
  282,t 0
  282 STRING_
  275,title NAME
  294,title {}
  283 command
  265,t 0
  284 which
  280,line 39
  279,line 38
  285 methodCall
  261,title METHODRESPONSE
}

proc xmlrpc::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { global parse; set parse(result) $2 }
                    2 { set _ $1 }
                    3 { set _ $1 }
                    4 { set _ [list methodcall [list $2 $3]] }
                    5 { set _ [list methodcall [list $2]] }
                    6 { set _ [list methodresponse $2] }
                    7 { set _ [list fault $2] }
                    8 { set _ [list methodname $2] }
                    9 { set _ [list params $2] }
                    10 { set _ [list params {}] }
                    11 { set _ [list params {}] }
                    12 { lappend _ $2 }
                    13 { set _ [list $1] }
                    14 { set _ [list param $2] }
                    15 { set _ [list param {}] }
                    16 { set _ [list param {}] }
                    17 { set _ [list value [list string [XMLUnQuote $1]]] }
                    18 { set _ [list value $2] }
                    19 { set _ [list value {}] }
                    20 { set _ [list value {}] }
                    21 { set _ [list string [XMLUnQuote $1]] }
                    22 { set _ [list struct $2] }
                    23 { set _ [list struct {}] }
                    24 { set _ [list struct {}] }
                    25 { set _ [list array [list data $3]] }
                    26 { set _ [list array [list data {}]] }
                    27 { set _ [list array [list data {}]] }
                    28 { lappend _ $2 }
                    29 { set _ [list $1] }
                    30 { set _ [list member [list $2 $3]] }
                    31 { set _ [list member {}] }
                    32 { set _ [list member {}] }
                    33 { set _ [list name $2] }
                    34 { set _ [list name {}] }
                    35 { set _ [list name {}] }
                    36 { lappend _ $2 }
                    37 { set _ [list $1] }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc xmlrpc::yyerror {msg} {
     variable yycnt
     variable yy_current_buffer
     variable index_

     ParserError $msg $yycnt $yy_current_buffer $index_
}
