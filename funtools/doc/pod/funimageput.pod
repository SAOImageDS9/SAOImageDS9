=pod

=head1 NAME



B<FunImagePut - put an image to a Funtools file>


=head1 SYNOPSIS





  #include <funtools.h>

  int FunImagePut(Fun fun, void *buf, int dim1, int dim2, int bitpix,
                  char *plist)





=head1 DESCRIPTION



The B<FunImagePut()> routine outputs an image array to a FITS
file. The image is written either as a primary header/data unit or as
an image extension, depending on whether other data have already been
written to the file.  That is, if the current file position is at the
beginning of the file, a primary HDU is written. Otherwise, an
image extension is written.


The first argument is the Funtools handle returned by 
FunOpen().  The second B<buf>
argument is a pointer to a data buffer to write.  The B<dim1>and
B<dim2> arguments that follow specify the dimensions of the image,
where dim1 corresponds to naxis1 and dim2 corresponds to naxis2.  The
B<bitpix> argument specifies the data type of the image and can
have the following FITS-standard values:


=over 4




=item *

8 unsigned char


=item *

16 short


=item *

32 int


=item *

-32 float


=item *

-64 double


=back




When FunTableRowPut() is first
called for a given image, Funtools checks to see if the primary header
has already been written (by having previously written an image or a
binary table.) If not, this image is written to the primary HDU.
Otherwise, it is written to an image extension.

Thus, a simple program to generate a FITS image might look like this:

  int i;
  int dim1=512, dim2=512;
  double *dbuf;
  Fun fun;
  dbuf = malloc(dim1*dim2*sizeof(double));
  /* open the output FITS image, preparing to copy input params */
  if( !(fun = FunOpen(argv[1], "w", NULL)) )
    gerror(stderr, "could not FunOpen output file: %s\n", argv[1]);
  for(i=0; i<(dim1*dim2); i++){
    ... fill dbuf ...
  }
  /* put the image (header will be generated automatically */
  if( !FunImagePut(fun, buf, dim1, dim2, -64, NULL) )
    gerror(stderr, "could not FunImagePut: %s\n", argv[1]);
  FunClose(fun);
  free(dbuf);



In addition, if a
Funtools reference handle
was specified when this table was opened, the
parameters from this
Funtools reference handle
are merged into the new image
header.  Furthermore, if a reference image was specified during 
FunOpen(), the values of
B<dim1>, B<dim2>, and B<bitpix> in the calling sequence
can all be set to 0.  In this case, default values are taken from the
reference image section.  This is useful if you are reading an image
section in its native data format, processing it, and then writing
that section to a new FITS file.  See the 
imblank example code.


The data are assumed to be in the native machine format and will
automatically be swapped to FITS big-endian format if necessary.  This
behavior can be over-ridden with the B<convert=[true|false]>
keyword in the B<plist> param list string.


When you are finished writing the image, you should call 
FunFlush() to write out the FITS
image padding. However, this is not necessary if you subsequently call
FunClose() without doing any other I/O to the FITS file.




=head1 SEE ALSO



See funtools(n) for a list of Funtools help pages


=cut
