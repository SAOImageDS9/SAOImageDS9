.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "funmerge 1"
.TH funmerge 1 "April 14, 2011" "version 1.4.5" "SAORD Documentation"
.SH "NAME"
funmerge \- merge one or more Funtools table files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfunmerge\fR  [\-w|\-x] \-f [colname] <iname1> <iname2>  ... <oname>
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 3
\&  \-f    # output a column specifying file from which this event came
\&  \-w    # adjust position values using WCS info
\&  \-x    # adjust position values using WCS info and save old values
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBfunmerge\fR merges \s-1FITS\s0 data from one or more
\&\s-1FITS\s0 Binary Table files
or raw event files.
.PP
The first argument to the program specifies the first input \s-1FITS\s0 table
or raw event file. If \*(L"stdin\*(R" is specified, data are read from the
standard input.  Use Funtools Bracket
Notation to specify \s-1FITS\s0 extensions and row filters.  Subsequent
arguments specify additional event files and tables to merge. (\s-1NB:\s0 Stdin
cannot not be used for any of these additional input file arguments.)
The last argument is the output \s-1FITS\s0 file. The columns in each input table
must be identical.
.PP
If an input file begins with the '@' character, it is processed as an
include file, i.e., as a text file containing event file names (as
well as blank lines and/or comment lines starting with the '#' sign).
If standard input is specified as an include file ('@stdin'), then
file names are read from the standard input until \s-1EOF\s0 (^D).  Event
files and include files can be mixed on a command line.
.PP
Rows from each table are written sequentially to the output
file.  If the switch \fB\-f [colname]\fR is specified on the command
line, an additional column is added to each row containing the number
of the file from which that row was taken (starting from one). In
this case, the corresponding file names are stored in the header
parameters having the prefix \fB\s-1FUNFIL\s0\fR, i.e., \s-1FUNFIL01\s0,
\&\s-1FUNFIL02\s0, etc.
.PP
Using the \fB\-w\fR switch (or \fB\-x\fR switch as described
below), \fBfunmerge\fR also can adjust the position column values
using the \s-1WCS\s0 information in each file. (By position columns, we mean
the columns that the table is binned on, i.e., those columns defined
by the \fBbincols=\fR switch, or (X,Y) by default.) To perform \s-1WCS\s0
alignment, the \s-1WCS\s0 of the first file is taken as the base \s-1WCS\s0.  Each
position in subsequent files is adjusted by first converting it to the
sky coordinate in its own \s-1WCS\s0 coordinate system, then by converting
this sky position to the sky position of the base \s-1WCS\s0, and finally
converting back to a pixel position in the base system. Note that in
order to perform \s-1WCS\s0 alignment, the appropriate \s-1WCS\s0 and \s-1TLMIN/TLMAX\s0
keywords must already exist in each \s-1FITS\s0 file.
.PP
When performing \s-1WCS\s0 alignment, you can save the original positions in
the output file by using the \fB\-x\fR (for \*(L"xtra\*(R") switch instead
of the \fB\-w\fR switch (i.e., using this switch also implies using
\&\fB\-w\fR) The old positions are saved in columns having the same
name as the original positional columns, with the added prefix \*(L"\s-1OLD_\s0\*(R".
.PP
Examples:
.PP
Merge two tables, and preserve the originating file number for
each row in the column called \*(L"\s-1FILE\s0\*(R" (along with the corresponding
file name in the header):
.PP
.Vb 1
\&  [sh] funmerge \-f "FILE" test.ev test2.ev merge.ev
.Ve
.PP
Merge two tables with \s-1WCS\s0 alignment, saving the old position values in
2 additional columns:
.PP
.Vb 1
\&  [sh] funmerge \-x test.ev test2.ev merge.ev
.Ve
.PP
This program only works on raw event files and binary tables. We have
not yet implemented image and array merging.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See funtools(7) for a list of Funtools help pages
