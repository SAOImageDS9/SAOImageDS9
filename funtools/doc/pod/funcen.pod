=pod

=head1 NAME



B<funcen - find centroid (for binary tables)>


=head1 SYNOPSIS





funcen [-i] [-n iter] [-t tol] [-v lev] <iname> <region>





=head1 OPTIONS





  -i            # use image filtering (default: event filtering)
  -n iter       # max number of iterations (default: 0)
  -t tol        # pixel tolerance distance (default: 1.0)
  -v [0,1,2,3]  # output verbosity level (default: 0)




=head1 DESCRIPTION




B<funcen> iteratively calculates the centroid position within one
or more regions of a Funtools table (FITS binary table or raw event
file).  Starting with an input table, an initial region specification,
and an iteration count, the program calculates the average x and y
position within the region and then uses this new position as the
region center for the next iteration. Iteration terminates when the
maximum number of iterations is reached or when the input tolerance
distance is met for that region. A count of events in the final region
is then output, along with the pixel position value (and, where
available, WCS position).


The first argument to the program specifies the Funtools table file to
process.  Since the file must be read repeatedly, a value of "stdin"
is not permitted when the number of iterations is non-zero.  Use 
Funtools Bracket Notation to specify FITS
extensions and filters.


The second required argument is the initial region descriptor. Multiple
regions are permitted. However, compound regions (accelerators,
variable argument regions and regions connected via boolean algebra)
are not permitted. Points and polygons also are illegal. These
restrictions might be lifted in a future version, if warranted.


The B<-n> (iteration number) switch specifies the maximum number of
iterations to perform. The default is 0, which means that the program will
simply count and display the number of events in the initial region(s).
Note that when iterations is 0, the data can be input via stdin.


The B<-t> (tolerance) switch specifies a floating point tolerance
value. If the distance between the current centroid position value and
the last position values is less than this value, iteration terminates.
The default value is 1 pixel.


The B<-v> (verbosity) switch specifies the verbosity level of the
output. The default is 0, which results in a single line of output for
each input region consisting of the following values:

  counts x y [ra dec coordsys]

The last 3 WCS values are output if WCS information is available in the
data file header. Thus, for example:

  [sh] funcen -n 0 snr.ev "cir 505 508 5"
  915 505.00 508.00 345.284038 58.870920 j2000

  [sh] funcen -n 3 snr.ev "cir 505 508 5"
  1120 504.43 509.65 345.286480 58.874587 j2000

The first example simply counts the number of events in the initial region.
The second example iterates the centroid calculation three times to determine
a final "best" position.

 
Higher levels of verbosity obviously imply more verbose output. At
level 1, the output essentially contains the same information as level
0, but with keyword formatting:

  [sh] funcen -v 1 -n 3 snr.ev "cir 505 508 5"
  event_file:     snr.ev
  initial_region: cir 505 508 5
  tolerance:      1.0000
  iterations:     1

  events:         1120
  x,y(physical):  504.43 509.65
  ra,dec(j2000):  345.286480 58.874587
  final_region1:  cir 504.43 509.65 5

Level 2 outputs results from intermediate calculations as well.


Ordinarily, region filtering is performed using analytic (event)
filtering, i.e. that same style of filtering as is performed by
B<fundisp> and B<funtable>. Use the B<-i> switch to specify image
filtering, i.e. the same style filtering as is performed by B<funcnts>.
Thus, you can perform a quick calculation of counts in regions, using
either the analytic or image filtering method, by specifying the
 B<-n 0> and optional B<-i> switches. These two method often
give different results because of how boundary events are processed:

  [sh] funcen  snr.ev "cir 505 508 5"
  915 505.00 508.00 345.284038 58.870920 j2000

  [sh] funcen -i snr.ev "cir 505 508 5"
  798 505.00 508.00 345.284038 58.870920 j2000

See Region Boundaries for more information
about how boundaries are calculated using these two methods.




=head1 SEE ALSO



See funtools(n) for a list of Funtools help pages


=cut
