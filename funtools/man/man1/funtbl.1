.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "funtbl 1"
.TH funtbl 1 "April 14, 2011" "version 1.4.5" "SAORD Documentation"
.SH "NAME"
funtbl \- extract a table from Funtools ASCII output
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBfuntable\fR [\-c cols] [\-h] [\-n table] [\-p prog] [\-s sep] <iname>
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
[\s-1NB:\s0 This program has been deprecated in favor of the \s-1ASCII\s0 text processing
support in funtools. You can now perform fundisp on funtools \s-1ASCII\s0 output
files (specifying the table using bracket notation) to extract tables
and columns.]
.PP
The \fBfuntbl\fR script extracts a specified table (without the
header and comments) from a funtools \s-1ASCII\s0 output file and writes the
result to the standard output.  The first non-switch argument is the
\&\s-1ASCII\s0 input file name (i.e. the saved output from funcnts, fundisp,
funhist, etc.). If no filename is specified, stdin is read. The
\&\-n switch specifies which table (starting from 1) to extract. The
default is to extract the first table.  The \-c switch is a
space-delimited list of column numbers to output, e.g.  \-c \*(L"1 3 5\*(R"
will extract the first three odd-numbered columns. The default is to
extract all columns. The \-s switch specifies the separator string to
put between columns. The default is a single space. The \-h switch
specifies that column names should be added in a header line before
the data is output. Without the switch, no header is prepended.  The
\&\-p program switch allows you to specify an awk-like program to run
instead of the default (which is host-specific and is determined at
build time). The \-T switch will output the data in rdb format (i.e.,
with a 2\-row header of column names and dashes, and with data columns
separated by tabs). The \-help switch will print out a message
describing program usage.
.PP
For example, consider the output from the following funcnts command:
.PP
.Vb 10
\&  [sh] funcnts \-sr snr.ev "ann 512 512 0 9 n=3"
\&  # source
\&  #   data file:        /proj/rd/data/snr.ev
\&  #   arcsec/pixel:     8
\&  # background
\&  #   constant value:   0.000000
\&  # column units
\&  #   area:             arcsec**2
\&  #   surf_bri:         cnts/arcsec**2
\&  #   surf_err:         cnts/arcsec**2
.Ve
.PP
.Vb 6
\&  # summed background-subtracted results
\&  upto   net_counts     error   background    berror      area  surf_bri  surf_err
\&  ---- ------------ --------- ------------ --------- --------- --------- ---------
\&     1      147.000    12.124        0.000     0.000   1600.00     0.092     0.008
\&     2      625.000    25.000        0.000     0.000   6976.00     0.090     0.004
\&     3     1442.000    37.974        0.000     0.000  15936.00     0.090     0.002
.Ve
.PP
.Vb 6
\&  # background-subtracted results
\&   reg   net_counts     error   background    berror      area  surf_bri  surf_err
\&  ---- ------------ --------- ------------ --------- --------- --------- ---------
\&     1      147.000    12.124        0.000     0.000   1600.00     0.092     0.008
\&     2      478.000    21.863        0.000     0.000   5376.00     0.089     0.004
\&     3      817.000    28.583        0.000     0.000   8960.00     0.091     0.003
.Ve
.PP
.Vb 4
\&  # the following source and background components were used:
\&  source_region(s)
\&  ----------------
\&  ann 512 512 0 9 n=3
.Ve
.PP
.Vb 5
\&   reg       counts    pixels      sumcnts    sumpix
\&  ---- ------------ --------- ------------ ---------
\&     1      147.000        25      147.000        25
\&     2      478.000        84      625.000       109
\&     3      817.000       140     1442.000       249
.Ve
.PP
There are four tables in this output. To extract the last one, you
can execute:
.PP
.Vb 4
\&  [sh] funcnts \-s snr.ev "ann 512 512 0 9 n=3" | funtbl \-n 4
\&  1 147.000 25 147.000 25
\&  2 478.000 84 625.000 109
\&  3 817.000 140 1442.000 249
.Ve
.PP
Note that the output has been re-formatted so that only a single space
separates each column, with no extraneous header or comment information.
.PP
To extract only columns 1,2, and 4 from the last example (but with a header
prepended and tabs between columns), you can execute:
.PP
.Vb 5
\&  [sh] funcnts \-s snr.ev "ann 512 512 0 9 n=3" | funtbl \-c "1 2 4" \-h \-n 4 \-s "\et"
\&  #reg    counts  sumcnts
\&  1       147.000 147.000
\&  2       478.000 625.000
\&  3       817.000 1442.000
.Ve
.PP
Of course, if the output has previously been saved in a file named
foo.out, the same result can be obtained by executing:
.PP
.Vb 5
\&  [sh] funtbl \-c "1 2 4" \-h \-n 4 \-s "\et" foo.out
\&  #reg    counts  sumcnts
\&  1       147.000 147.000
\&  2       478.000 625.000
\&  3       817.000 1442.000
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See funtools(7) for a list of Funtools help pages
