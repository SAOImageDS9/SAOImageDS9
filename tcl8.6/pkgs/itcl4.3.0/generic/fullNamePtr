itclBase.c:    hPtr = Tcl_FindHashEntry(&ioPtr->iclsPtr->variables, (char *)objPtr);
itclBuiltin.c:	    if (iclsPtr->flags & BiMethodList[i].flags) {
itclBuiltin.c:    infoPtr = contextIclsPtr->infoPtr;
itclBuiltin.c:    if (!(contextIclsPtr->flags & ITCL_CLASS)) {
itclBuiltin.c:            hPtr = Tcl_FindHashEntry(&contextIclsPtr->options,
itclBuiltin.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->variables, &place);
itclBuiltin.c:            hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, token+1);
itclBuiltin.c:            hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, token+1);
itclBuiltin.c:                hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, token);
itclBuiltin.c:	        Tcl_GetString(ivPtr->iclsPtr->fullNamePtr), -1);
itclBuiltin.c:	    if (!ivPtr->iclsPtr->infoPtr->useOldResolvers) {
itclBuiltin.c:	    Itcl_SetCallFrameNamespace(interp, ivPtr->iclsPtr->nsPtr);
itclBuiltin.c:    if (!(contextIclsPtr->flags & ITCL_CLASS)) {
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, name+1);
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars,
itclBuiltin.c:    idoPtr = ioptPtr->iclsPtr->infoPtr->currIdoPtr;
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->functions, (char *)objPtr);
itclBuiltin.c:		contextIoPtr = imPtr->iclsPtr->infoPtr->currIoPtr;
itclBuiltin.c:    result = Itcl_HandleClass(iclsPtr->infoPtr, interp, objc, objv);
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objv[1]);
itclBuiltin.c:    newObjv[1] = iclsPtr->namePtr;
itclBuiltin.c:    newObjv[2] = Tcl_NewStringObj(iclsPtr->nsPtr->fullName, -1);
itclBuiltin.c:        if (iclsPtr->infoPtr->currIoPtr != NULL) {
itclBuiltin.c:            if (iclsPtr->infoPtr->currIoPtr->hadConstructorError == 0) {
itclBuiltin.c:	        iclsPtr->infoPtr->currIoPtr->hadConstructorError = 1;
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objv[1]);
itclBuiltin.c:        FOREACH_HASH_VALUE(icPtr, &iclsPtr->components) {
itclBuiltin.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclBuiltin.c:	    if (iclsPtr->flags & ITCL_ECLASS) {
itclBuiltin.c:	hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions, (char *)objv[1]);
itclBuiltin.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclBuiltin.c:			&iclsPtr->delegatedFunctions) {
itclBuiltin.c:		if (Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclBuiltin.c:			        &iclsPtr->delegatedFunctions,
itclBuiltin.c:		    Tcl_AppendToObj(resPtr, Tcl_GetString(iclsPtr->namePtr),
itclBuiltin.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions, (char *)objv[2]);
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclBuiltin.c:		    &iclsPtr->delegatedFunctions) {
itclBuiltin.c:            Tcl_AppendToObj(objPtr, iclsPtr->nsPtr->fullName, -1);
itclBuiltin.c:	    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclBuiltin.c:	if (Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclBuiltin.c:		        &iclsPtr->delegatedFunctions, (char *)newObjv[1],
itclBuiltin.c:	Tcl_AppendToObj(resPtr, Tcl_GetString(iclsPtr->namePtr), -1);
itclBuiltin.c:    infoPtr = contextIclsPtr->infoPtr;
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions, (char *)
itclBuiltin.c:	if (contextIclsPtr->flags & ITCL_ECLASS) {
itclBuiltin.c:                icPtr->ivPtr->iclsPtr->infoPtr->currIdoPtr = idoPtr;
itclBuiltin.c:            icPtr->ivPtr->iclsPtr->infoPtr->currIdoPtr = NULL;
itclBuiltin.c:            hPtr2 = Tcl_FindHashEntry(&contextIclsPtr->options,
itclBuiltin.c:            if (contextIclsPtr->flags & ITCL_ECLASS) {
itclBuiltin.c:            if (contextIclsPtr->flags & ITCL_ECLASS) {
itclBuiltin.c:                        icPtr->ivPtr->iclsPtr->infoPtr->currIdoPtr = idoPtr;
itclBuiltin.c:                    icPtr->ivPtr->iclsPtr->infoPtr->currIdoPtr = NULL;
itclBuiltin.c:	    Itcl_SetCallFrameNamespace(interp, contextIclsPtr->nsPtr);
itclBuiltin.c:	    evalNsPtr = ioptPtr->iclsPtr->nsPtr;
itclBuiltin.c:	    hPtr = Tcl_FindHashEntry(&contextIoPtr->iclsPtr->resolveCmds,
itclBuiltin.c:	        evalNsPtr = imPtr->iclsPtr->nsPtr;
itclBuiltin.c:    infoPtr = contextIclsPtr->infoPtr;
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions, (char *)
itclBuiltin.c:    infoPtr = contextIclsPtr->infoPtr;
itclBuiltin.c:    if (!(contextIclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR))) {
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->components, (char *)objv[1]);
itclBuiltin.c:	        Tcl_GetString(contextIclsPtr->namePtr),
itclBuiltin.c:    if (contextIclsPtr->flags & ITCL_TYPE) {
itclBuiltin.c:        Tcl_AppendToObj(objPtr, Tcl_GetString(contextIclsPtr->fullNamePtr), -1);
itclBuiltin.c:    if ((objc > 1) || !(contextIclsPtr->flags &
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->infoPtr->instances,
itclBuiltin.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->infoPtr->instances,
itclBuiltin.c:    objPtr = Tcl_NewStringObj(contextIclsPtr->nsPtr->fullName, -1);
itclBuiltin.c:        hPtr =Tcl_FindHashEntry(&contextIclsPtr->infoPtr->objectInstances,
itclBuiltin.c:    objPtr = Tcl_NewStringObj(contextIclsPtr->nsPtr->fullName, -1);
itclBuiltin.c:    objPtr = Tcl_NewStringObj(contextIclsPtr->nsPtr->fullName, -1);
itclBuiltin.c:        hPtr =Tcl_FindHashEntry(&contextIclsPtr->infoPtr->objectInstances,
itclBuiltin.c:	Tcl_AppendToObj(resultPtr, Tcl_GetString(contextIclsPtr->namePtr), -1);
itclClass.c:    iclsPtr->refCount++;
itclClass.c:    if (--iclsPtr->refCount == 0) {
itclClass.c:    if (iclsPtr->flags & ITCL_CLASS_IS_RENAMED) {
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_IS_RENAMED;
itclClass.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    if (!(iclsPtr->flags & ITCL_CLASS_NS_IS_DESTROYED)) {
itclClass.c:    iclsPtr->interp = interp;
itclClass.c:    iclsPtr->infoPtr = infoPtr;
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->variables);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->functions);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->options);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->components);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->delegatedOptions);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->delegatedFunctions);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->methodVariables);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->resolveCmds);
itclClass.c:    iclsPtr->numInstanceVars = 0;
itclClass.c:    Tcl_InitHashTable(&iclsPtr->classCommons, TCL_ONE_WORD_KEYS);
itclClass.c:    Tcl_InitHashTable(&iclsPtr->resolveVars, TCL_ONE_WORD_KEYS);
itclClass.c:    Tcl_InitHashTable(&iclsPtr->contextCache, TCL_ONE_WORD_KEYS);
itclClass.c:    Itcl_InitList(&iclsPtr->bases);
itclClass.c:    Itcl_InitList(&iclsPtr->derived);
itclClass.c:    iclsPtr->resolvePtr = (Tcl_Resolve *)ckalloc(sizeof(Tcl_Resolve));
itclClass.c:    iclsPtr->resolvePtr->cmdProcPtr = Itcl_CmdAliasProc;
itclClass.c:    iclsPtr->resolvePtr->varProcPtr = Itcl_VarAliasProc;
itclClass.c:    iclsPtr->resolvePtr->clientData = resolveInfoPtr;
itclClass.c:    iclsPtr->flags    = infoPtr->currClassFlags;
itclClass.c:    Tcl_InitHashTable(&iclsPtr->heritage, TCL_ONE_WORD_KEYS);
itclClass.c:    (void) Tcl_CreateHashEntry(&iclsPtr->heritage, (char*)iclsPtr, &newEntry);
itclClass.c:    iclsPtr->clsPtr = Tcl_GetObjectAsClass(oPtr);
itclClass.c:    iclsPtr->oPtr = oPtr;
itclClass.c:    Tcl_ObjectSetMetadata(iclsPtr->oPtr, infoPtr->class_meta_type, iclsPtr);
itclClass.c:    Tcl_ObjectSetMethodNameMapper(iclsPtr->oPtr, ItclMapMethodNameProc);
itclClass.c:    cmd = Tcl_GetObjectCommand(iclsPtr->oPtr);
itclClass.c:		Tcl_GetString(iclsPtr->fullNamePtr), "\"", NULL);
itclClass.c:    if (iclsPtr->infoPtr->useOldResolvers) {
itclClass.c:        Tcl_SetNamespaceResolver(classNs, iclsPtr->resolvePtr);
itclClass.c:    iclsPtr->nsPtr = classNs;
itclClass.c:    iclsPtr->namePtr = Tcl_NewStringObj(classNs->name, -1);
itclClass.c:    Tcl_IncrRefCount(iclsPtr->namePtr);
itclClass.c:    iclsPtr->fullNamePtr = Tcl_NewStringObj(classNs->fullName, -1);
itclClass.c:    Tcl_IncrRefCount(iclsPtr->fullNamePtr);
itclClass.c:            (char *)iclsPtr->fullNamePtr, &newEntry);
itclClass.c:		"class \"", Tcl_GetString(iclsPtr->fullNamePtr), "\"", NULL);
itclClass.c:		Tcl_GetString(iclsPtr->fullNamePtr), "\"", NULL);
itclClass.c:		Tcl_GetString(iclsPtr->fullNamePtr), "\"", NULL);
itclClass.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    iclsPtr->thisCmd = Tcl_CreateObjCommand(interp, Tcl_DStringValue(&buffer),
itclClass.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    iclsPtr->thisCmd = Tcl_CreateObjCommand(interp, Tcl_DStringValue(&buffer),
itclClass.c:    if (iclsPtr->flags & ITCL_TYPE) {
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:    if (iclsPtr->flags & (ITCL_ECLASS)) {
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr,
itclClass.c:    iclsPtr->accessCmd = Tcl_GetObjectCommand(oPtr);
itclClass.c:    Tcl_TraceCommand(interp, Tcl_GetCommandName(interp, iclsPtr->accessCmd),
itclClass.c:    isDerivedReleased = iclsPtr->flags & ITCL_CLASS_DERIVED_RELEASED;
itclClass.c:            iclsPtr->nsPtr->fullName));
itclClass.c:    if (iclsPtr->flags & ITCL_CLASS_IS_DELETED) {
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_IS_DELETED;
itclClass.c:    elem = Itcl_FirstListElem(&iclsPtr->derived);
itclClass.c:            iclsPtr->infoPtr, NULL, NULL);
itclClass.c:    Tcl_DeleteNamespace(iclsPtr->nsPtr);
itclClass.c:    if (iclsPtr->flags & ITCL_CLASS_IS_DESTROYED) {
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_IS_DESTROYED;
itclClass.c:    if (!(iclsPtr->flags & ITCL_CLASS_NS_IS_DESTROYED)) {
itclClass.c:        iclsPtr->accessCmd = NULL;
itclClass.c:        Tcl_DeleteNamespace(iclsPtr->nsPtr);
itclClass.c:    if (iclsPtr->flags & ITCL_CLASS_NS_IS_DESTROYED) {
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_NS_IS_DESTROYED;
itclClass.c:    infoPtr = iclsPtr->infoPtr;
itclClass.c:            (char *)iclsPtr->fullNamePtr);
itclClass.c:    elem = Itcl_FirstListElem(&iclsPtr->derived);
itclClass.c:        elem = Itcl_FirstListElem(&iclsPtr->derived);
itclClass.c:    hPtr = Tcl_FirstHashEntry(&iclsPtr->infoPtr->objects, &place);
itclClass.c:                Tcl_DeleteCommandFromToken(iclsPtr->interp, ioPtr->accessCmd);
itclClass.c:	        hPtr = Tcl_FirstHashEntry(&iclsPtr->infoPtr->objects, &place);
itclClass.c:    belem = Itcl_FirstListElem(&iclsPtr->bases);
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_NS_TEARDOWN;
itclClass.c:    if (iclsPtr->accessCmd) {
itclClass.c:	if (Tcl_GetCommandInfoFromToken(iclsPtr->accessCmd, &cmdInfo) == 1) {
itclClass.c:	    cmdPtr = iclsPtr->accessCmd;
itclClass.c:	    iclsPtr->accessCmd = NULL;
itclClass.c:                Tcl_DeleteCommandFromToken(iclsPtr->interp, cmdPtr);
itclClass.c:    if (iclsPtr->flags & ITCL_CLASS_IS_FREED) {
itclClass.c:    ItclDeleteClassesDictInfo(iclsPtr->interp, iclsPtr);
itclClass.c:    iclsPtr->flags |= ITCL_CLASS_IS_FREED;
itclClass.c:    elem = Itcl_FirstListElem(&iclsPtr->derived);
itclClass.c:    Itcl_DeleteList(&iclsPtr->derived);
itclClass.c:    FOREACH_HASH_VALUE(vlookup, &iclsPtr->resolveVars) {
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->resolveVars);
itclClass.c:        hPtr = Tcl_FirstHashEntry(&iclsPtr->resolveCmds, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->resolveCmds);
itclClass.c:        hPtr = Tcl_FirstHashEntry(&iclsPtr->options, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->options);
itclClass.c:    FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclClass.c:	if (imPtr->iclsPtr->flags & ITCL_CLASS_CONSTRUCT_ERROR) {
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->functions);
itclClass.c:    FOREACH_HASH_VALUE(idoPtr, &iclsPtr->delegatedOptions) {
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->delegatedOptions);
itclClass.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->delegatedFunctions);
itclClass.c:        hPtr = Tcl_FirstHashEntry(&iclsPtr->components, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->components);
itclClass.c:        hPtr = Tcl_FirstHashEntry(&iclsPtr->variables, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->variables);
itclClass.c:    elem = Itcl_FirstListElem(&iclsPtr->bases);
itclClass.c:    Itcl_DeleteList(&iclsPtr->bases);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->heritage);
itclClass.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->infoPtr->nameClasses,
itclClass.c:            (char *)iclsPtr->fullNamePtr);
itclClass.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->infoPtr->namespaceClasses,
itclClass.c:            (char *)iclsPtr->nsPtr);
itclClass.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->infoPtr->classes, (char *)iclsPtr);
itclClass.c:    if (iclsPtr->widgetClassPtr != NULL) {
itclClass.c:        Tcl_DecrRefCount(iclsPtr->widgetClassPtr);
itclClass.c:    if (iclsPtr->hullTypePtr != NULL) {
itclClass.c:        Tcl_DecrRefCount(iclsPtr->hullTypePtr);
itclClass.c:    if (iclsPtr->typeConstructorPtr != NULL) {
itclClass.c:        Tcl_DecrRefCount(iclsPtr->typeConstructorPtr);
itclClass.c:    if (iclsPtr->initCode) {
itclClass.c:        Tcl_DecrRefCount(iclsPtr->initCode);
itclClass.c:    Itcl_ReleaseData((ClientData)iclsPtr->infoPtr);
itclClass.c:    Tcl_DecrRefCount(iclsPtr->namePtr);
itclClass.c:    Tcl_DecrRefCount(iclsPtr->fullNamePtr);
itclClass.c:    if (iclsPtr->resolvePtr != NULL) {
itclClass.c:        ckfree((char *)iclsPtr->resolvePtr->clientData);
itclClass.c:        ckfree((char *)iclsPtr->resolvePtr);
itclClass.c:	if (!(iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR))) {
itclClass.c:	if (!(iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR))) {
itclClass.c:                    sprintf(unique,"%.200s%d", Tcl_GetString(iclsPtr->namePtr),
itclClass.c:                        iclsPtr->unique++);
itclClass.c:    hPtr = Tcl_FirstHashEntry(&iclsPtr->resolveVars, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->resolveVars);
itclClass.c:    Tcl_InitHashTable(&iclsPtr->resolveVars, TCL_STRING_KEYS);
itclClass.c:    iclsPtr->numInstanceVars = 0;
itclClass.c:    iclsPtr->numInstanceVars++;
itclClass.c:    iclsPtr->numInstanceVars++;
itclClass.c:    iclsPtr->numInstanceVars++;
itclClass.c:		    vlookup->varNum = iclsPtr->numInstanceVars++;
itclClass.c:	    icviPtr->nsPtr = iclsPtr->nsPtr;
itclClass.c:	            iclsPtr->infoPtr->interp, iclsPtr2->nsPtr,
itclClass.c:                    vlookup->var.index = iclsPtr->numInstanceVars++;
itclClass.c:                hPtr = Tcl_CreateHashEntry(&iclsPtr->resolveVars,
itclClass.c:                            Tcl_GetHashKey(&iclsPtr->resolveVars, hPtr);
itclClass.c:                    Itcl_RegisterClassVariable(iclsPtr->infoPtr->interp,
itclClass.c:		        iclsPtr->nsPtr, Tcl_DStringValue(&buffer),
itclClass.c:        hPtr = Tcl_FirstHashEntry(&iclsPtr->resolveCmds, &place);
itclClass.c:    Tcl_DeleteHashTable(&iclsPtr->resolveCmds);
itclClass.c:    Tcl_InitObjHashTable(&iclsPtr->resolveCmds);
itclClass.c:                hPtr = Tcl_CreateHashEntry(&iclsPtr->resolveCmds,
itclClass.c:	            icciPtr->nsPtr = iclsPtr->nsPtr;
itclClass.c:	                    iclsPtr->infoPtr->interp, iclsPtr->nsPtr,
itclClass.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclClass.c:	        hPtr = Tcl_CreateHashEntry(&iclsPtr->delegatedFunctions,
itclClass.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->variables, (char *)namePtr, &newEntry);
itclClass.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclClass.c:    ivPtr->infoPtr      = iclsPtr->infoPtr;
itclClass.c:            Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->options,
itclClass.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclClass.c:    iclsPtr->numOptions++;
itclClass.c:            Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->methodVariables,
itclClass.c:            Tcl_GetString (iclsPtr->fullNamePtr), "\"",
itclClass.c:            Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclClass.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->variables, (char *)namePtr);
itclClass.c:        elem = Itcl_LastListElem(&iclsPtr->bases);
itclClass.c:        hPtr = Tcl_FindHashEntry(&ivPtr->iclsPtr->variables,
itclClass.c:    hPtr = Tcl_FindHashEntry(&imPtr->iclsPtr->infoPtr->procMethods,
itclClass.c:        hPtr = Tcl_FindHashEntry(&imPtr->iclsPtr->functions,
itclCmd.c:    return Itcl_PublicObjectCmd(oPtr, interp, iclsPtr->clsPtr, objc, objv);
itclCmd.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objv[1]);
itclCmd.c:    if (!(iclsPtr->flags & ITCL_CLASS)) {
itclCmd.c:        FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclCmd.c:	Tcl_AppendResult(interp, "class \"", iclsPtr->nsPtr->fullName,
itclCmd.c:                                &contextIoPtr->iclsPtr->heritage,
itclCmd.c:        entry = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, token);
itclCmd.c:                Tcl_GetString(contextIclsPtr->fullNamePtr), "\"",
itclCmd.c:        infoPtr = contextIclsPtr->infoPtr;
itclCmd.c:        if (contextIclsPtr->flags & ITCL_ECLASS) {
itclCmd.c:	   contextIoPtr = iclsPtr->infoPtr->currIoPtr;
itclCmd.c:    mPtr = Itcl_NewForwardClassMethod(interp, iclsPtr->clsPtr, 1,
itclCmd.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->components, (char *)
itclCmd.c:    contextIclsPtr->numVariables++;
itclCmd.c:    Tcl_DStringAppend(&buffer, contextIclsPtr->nsPtr->fullName, -1);
itclCmd.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->variables, (char *)objv[2]);
itclCmd.c:    vlookup->varNum = contextIclsPtr->numInstanceVars++;
itclCmd.c:    nsPtr = contextIclsPtr->nsPtr;
itclCmd.c:        hPtr = Tcl_CreateHashEntry(&contextIclsPtr->resolveVars,
itclCmd.c:                    Tcl_GetHashKey(&contextIclsPtr->resolveVars, hPtr);
itclCmd.c:            Itcl_RegisterClassVariable(contextIclsPtr->infoPtr->interp,
itclCmd.c:                     contextIclsPtr->nsPtr, Tcl_DStringValue(&buffer),
itclCmd.c:        hPtr = Tcl_FindHashEntry(&contextIclsPtr->components, (char *)objv[2]);
itclCmd.c:            FOREACH_HASH_VALUE(idoPtr, &iclsPtr->delegatedOptions) {
itclCmd.c:    Tcl_AppendToObj(objPtr, iclsPtr->nsPtr->fullName, -1);
itclCmd.c:    objPtr = Tcl_NewStringObj(iclsPtr->nsPtr->fullName, -1);
itclCmd.c:    if (iclsPtr->flags & ITCL_TYPE) {
itclCmd.c:    if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclCmd.c:    if (iclsPtr->flags & ITCL_WIDGET) {
itclCmd.c:        if (iclsPtr->hullTypePtr != NULL) {
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_FRAME;
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_LABEL_FRAME;
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_TOPLEVEL;
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_TTK_FRAME;
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_TTK_LABEL_FRAME;
itclCmd.c:	    iclsPtr->flags |= ITCL_WIDGET_TTK_TOPLEVEL;
itclCmd.c:        iclsPtr->hullTypePtr = Tcl_NewStringObj(hullTypeName, -1);
itclCmd.c:	Tcl_IncrRefCount(iclsPtr->hullTypePtr);
itclCmd.c:    if (iclsPtr->flags & ITCL_TYPE) {
itclCmd.c:    if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclCmd.c:    if (iclsPtr->flags & ITCL_WIDGET) {
itclCmd.c:        if (iclsPtr->widgetClassPtr != NULL) {
itclCmd.c:        iclsPtr->widgetClassPtr = Tcl_NewStringObj(widgetClassName, -1);
itclCmd.c:	Tcl_IncrRefCount(iclsPtr->widgetClassPtr);
itclHelpers.c:        hPtr = Tcl_FindHashEntry(&tracePtr->iclsPtr->classCommons,
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    FOREACH_HASH(keyPtr1, value, &iclsPtr->infoPtr->classTypes) {
itclHelpers.c:        if (iclsPtr->flags & PTR2INT(value)) {
itclHelpers.c:	        "type for class \"", Tcl_GetString(iclsPtr->fullNamePtr),
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-name", iclsPtr->namePtr) != TCL_OK) {
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-fullname", iclsPtr->fullNamePtr)
itclHelpers.c:    if (iclsPtr->widgetClassPtr != NULL) {
itclHelpers.c:        if (AddDictEntry(interp, valuePtr2, "-widget", iclsPtr->widgetClassPtr)
itclHelpers.c:    if (iclsPtr->hullTypePtr != NULL) {
itclHelpers.c:        if (AddDictEntry(interp, valuePtr2, "-hulltype", iclsPtr->hullTypePtr)
itclHelpers.c:    if (iclsPtr->typeConstructorPtr != NULL) {
itclHelpers.c:	        iclsPtr->typeConstructorPtr) != TCL_OK) {
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    FOREACH_HASH(keyPtr, value, &iclsPtr->infoPtr->classTypes) {
itclHelpers.c:        if (iclsPtr->flags & PTR2INT(value)) {
itclHelpers.c:	        "type for class \"", Tcl_GetString(iclsPtr->fullNamePtr),
itclHelpers.c:    if (Tcl_DictObjRemove(interp, valuePtr, iclsPtr->fullNamePtr) != TCL_OK) {
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-class", ioPtr->iclsPtr->fullNamePtr)
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:    keyPtr = iclsPtr->fullNamePtr;
itclHelpers.c:        keyPtr = iclsPtr->fullNamePtr;
itclInfo.c:	    if (iclsPtr->flags & InfoMethodList[i].flags) {
itclInfo.c:	    if (iclsPtr->flags & infoCmdsDelegated2[i].flags) {
itclInfo.c:        contextNs = contextIoPtr->iclsPtr->nsPtr;
itclInfo.c:        assert(contextIclsPtr->nsPtr != NULL);
itclInfo.c:        contextNs = contextIclsPtr->nsPtr;
itclInfo.c:        if (contextIclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:    tablePtr = &iclsPtr->options;
itclInfo.c:    tablePtr = &iclsPtr->delegatedOptions;
itclInfo.c:    objPtr = Tcl_NewStringObj(Tcl_GetString(iclsPtr->namePtr), -1);
itclInfo.c:    if (imPtr->iclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:	    if (isDirectCall && upNsPtr != contextIclsPtr->nsPtr) {
itclInfo.c:		        &imPtr->iclsPtr->infoPtr->namespaceClasses,
itclInfo.c:    elem = Itcl_FirstListElem(&contextIclsPtr->bases);
itclInfo.c:        if (iclsPtr->nsPtr->parentPtr == activeNs) {
itclInfo.c:            objPtr = Tcl_NewStringObj(iclsPtr->nsPtr->name, -1);
itclInfo.c:            objPtr = Tcl_NewStringObj(iclsPtr->nsPtr->fullName, -1);
itclInfo.c:    if (contextIclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:	    if (isDirectCall && upNsPtr != contextIclsPtr->nsPtr) {
itclInfo.c:		        &imPtr->iclsPtr->infoPtr->namespaceClasses,
itclInfo.c:        if (iclsPtr->nsPtr == NULL) {
itclInfo.c:            Tcl_AppendResult(interp, "ITCL: iclsPtr->nsPtr == NULL",
itclInfo.c:	            Tcl_GetString(iclsPtr->fullNamePtr), NULL);
itclInfo.c:        if (iclsPtr->nsPtr->parentPtr == activeNs) {
itclInfo.c:            objPtr = Tcl_NewStringObj(iclsPtr->nsPtr->name, -1);
itclInfo.c:            objPtr = Tcl_NewStringObj(iclsPtr->nsPtr->fullName, -1);
itclInfo.c:        entry = Tcl_FindHashEntry(&contextIclsPtr->resolveCmds, (char *)objPtr);
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:            entry = Tcl_FirstHashEntry(&iclsPtr->functions, &place);
itclInfo.c:			if (!(imPtr->iclsPtr->flags & ITCL_ECLASS)) {
itclInfo.c:			if (!(imPtr->iclsPtr->flags &
itclInfo.c:        entry = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, varName);
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:                                contextIoPtr->iclsPtr->interp,
itclInfo.c:            entry = Tcl_FirstHashEntry(&iclsPtr->variables, &place);
itclInfo.c:	    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR|ITCL_WIDGET)) {
itclInfo.c:	FOREACH_HASH_VALUE(ivPtr, &iclsPtr->variables) {
itclInfo.c:		FOREACH_HASH_VALUE(ivPtr, &iclsPtr->variables) {
itclInfo.c:    if (contextIclsPtr->flags &
itclInfo.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveCmds, (char *)objPtr);
itclInfo.c:	if (contextIclsPtr->flags &
itclInfo.c:	    hPtr2 = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions,
itclInfo.c:    if ((contextIclsPtr != NULL) && (contextIclsPtr->flags &
itclInfo.c:    hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveCmds, (char *)objPtr);
itclInfo.c:	if (contextIclsPtr->flags &
itclInfo.c:	    hPtr2 = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions,
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->options, &place);
itclInfo.c:	nsPtr = contextIclsPtr->nsPtr;
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->components,
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->components, &place);
itclInfo.c:        contextNs = contextIoPtr->iclsPtr->nsPtr;
itclInfo.c:        assert(contextIclsPtr->nsPtr != NULL);
itclInfo.c:        contextNs = contextIclsPtr->nsPtr;
itclInfo.c:        if (contextIclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:    if (!(contextIclsPtr->flags & ITCL_WIDGET)) {
itclInfo.c:	nsPtr = contextIclsPtr->nsPtr;
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:	nsPtr = contextIclsPtr->nsPtr;
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:        contextNs = contextIoPtr->iclsPtr->nsPtr;
itclInfo.c:        assert(contextIclsPtr->nsPtr != NULL);
itclInfo.c:        contextNs = contextIclsPtr->nsPtr;
itclInfo.c:        if (contextIclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:    if (!(contextIclsPtr->flags & ITCL_TYPE)) {
itclInfo.c:    if (!(contextIclsPtr->flags & ITCL_WIDGET)) {
itclInfo.c:    Tcl_SetResult(interp, Tcl_GetString(contextIclsPtr->hullTypePtr),
itclInfo.c:    FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclInfo.c:        FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclInfo.c:        hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveCmds, (char *)objPtr);
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->functions, &place);
itclInfo.c:    FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclInfo.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclInfo.c:        tablePtr = &iclsPtr->options;
itclInfo.c:        tablePtr = &iclsPtr->delegatedOptions;
itclInfo.c:	if (iclsPtr->flags & ITCL_TYPE) {
itclInfo.c:	    name = Tcl_GetString(iclsPtr->namePtr);
itclInfo.c:		        Tcl_NewStringObj(Tcl_GetString(iclsPtr->namePtr), -1));
itclInfo.c:        hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveCmds, (char *)objPtr);
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->functions, &place);
itclInfo.c:    FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclInfo.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclInfo.c:    FOREACH_HASH_VALUE(ivPtr, &iclsPtr->variables) {
itclInfo.c:        hPtr = Tcl_FindHashEntry(&contextIclsPtr->resolveVars, varName);
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:                contextIclsPtr->nsPtr->fullName, "\"",
itclInfo.c:                                contextIoPtr->iclsPtr->interp,
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->variables, &place);
itclInfo.c:        contextNs = contextIoPtr->iclsPtr->nsPtr;
itclInfo.c:        assert(contextIclsPtr->nsPtr != NULL);
itclInfo.c:        contextNs = contextIclsPtr->nsPtr;
itclInfo.c:        if (contextIclsPtr->infoPtr->useOldResolvers) {
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:            contextNs = contextIclsPtr->nsPtr;
itclInfo.c:    if (!(contextIclsPtr->flags & ITCL_WIDGETADAPTOR)) {
itclInfo.c:	    if (ioPtr->iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclInfo.c:    FOREACH_HASH_VALUE(idoPtr, &iclsPtr->delegatedOptions) {
itclInfo.c:	if (iclsPtr->flags &
itclInfo.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclInfo.c:	if (iclsPtr->flags &
itclInfo.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclInfo.c:	if (iclsPtr->flags &
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->delegatedOptions, &place);
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:            hPtr = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions,
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->delegatedFunctions, &place);
itclInfo.c:    infoPtr = contextIclsPtr->infoPtr;
itclInfo.c:            hPtr = Tcl_FindHashEntry(&contextIclsPtr->delegatedFunctions,
itclInfo.c:            hPtr = Tcl_FirstHashEntry(&iclsPtr->delegatedFunctions, &place);
itclMethod.c:    entry = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclMethod.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclMethod.c:    entry = Tcl_FindHashEntry(&iclsPtr->resolveVars, tail);
itclMethod.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclMethod.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->functions, (char *)namePtr, &newEntry);
itclMethod.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclMethod.c:    imPtr->infoPtr    = iclsPtr->infoPtr;
itclMethod.c:            Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclMethod.c:        iclsPtr->constructorInit = imPtr;
itclMethod.c:        iclsPtr->constructor = imPtr;
itclMethod.c:        iclsPtr->destructor = imPtr;
itclMethod.c:	    imPtr->iclsPtr->clsPtr, ItclCheckCallMethod, ItclAfterCallMethod,
itclMethod.c:        hPtr = Tcl_CreateHashEntry(&imPtr->iclsPtr->infoPtr->procMethods,
itclMethod.c:	if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclMethod.c:		        if (! (iclsPtr->infoPtr->functionFlags &
itclMethod.c:			if (iclsPtr->infoPtr->functionFlags &
itclMethod.c:			/* FIXME should use iclsPtr->infoPtr->functionFlags here */
itclMethod.c:        result =  ItclObjectCmd(imPtr, interp, oPtr, imPtr->iclsPtr->clsPtr,
itclMethod.c:	Itcl_SetCallFrameNamespace(interp, imPtr->iclsPtr->nsPtr);
itclMethod.c:            entry = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclMethod.c:                Tcl_GetCommandFullName(contextIoPtr->iclsPtr->interp,
itclMethod.c:                    contextIoPtr->iclsPtr->accessCmd, objPtr);
itclMethod.c:		    contextIoPtr->iclsPtr->interp, contextIoPtr->accessCmd);
itclMethod.c:		    contextIoPtr->iclsPtr->interp, contextIoPtr->accessCmd);
itclMethod.c:            entry = Tcl_FindHashEntry(&ioPtr->iclsPtr->resolveCmds,
itclMethod.c:	    hPtr = Tcl_FindHashEntry(&imPtr->iclsPtr->infoPtr->procMethods,
itclMethod.c:	            (imPtr->iclsPtr->nsPtr != imPtr2->iclsPtr->nsPtr)) {
itclMethod.c:	        (char *)iclsPtr->namePtr) == NULL) {
itclMethod.c:            entry = Tcl_FindHashEntry(&iclsPtr->functions, (char *)objPtr);
itclMethod.c:    infoPtr = iclsPtr->infoPtr;
itclMethod.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclMethod.c:    infoPtr = iclsPtr->infoPtr;
itclMethod.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, varName);
itclMethod.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->classCommons,
itclMethod.c:    if (!imPtr->iclsPtr->infoPtr->useOldResolvers) {
itclMethod.c:        Itcl_SetCallFrameResolver(interp, imPtr->iclsPtr->resolvePtr);
itclMethod.c:        ioPtr = imPtr->iclsPtr->infoPtr->currIoPtr;
itclMethod.c:                if (!imPtr->iclsPtr->infoPtr->useOldResolvers) {
itclMethod.c:                            imPtr->iclsPtr->resolvePtr);
itclMethod.c:	        imPtr->iclsPtr->infoPtr->object_meta_type);
itclMethod.c:            ItclGetInfoUsage(interp, objPtr, imPtr->iclsPtr->infoPtr);
itclMethod.c:    Itcl_PushStack(callContextPtr, &imPtr->iclsPtr->infoPtr->contextStack);
itclMethod.c:    imPtr->iclsPtr->callRefCount++;
itclMethod.c:    if (!imPtr->iclsPtr->infoPtr->useOldResolvers) {
itclMethod.c:        imPtr->iclsPtr->callRefCount--;
itclMethod.c:                    (char *)imPtr->iclsPtr->namePtr, &newEntry);
itclMethod.c:                    (char *)imPtr->iclsPtr->namePtr, &newEntry);
itclMethod.c:		        &imPtr->iclsPtr->infoPtr->constructorStack);
itclMethod.c:	                &imPtr->iclsPtr->infoPtr->constructorStack,
itclMethod.c:	    if (upNsPtr == currIclsPtr->nsPtr) {
itclMethod.c:            Tcl_AppendToObj(objPtr, currIclsPtr->nsPtr->fullName, -1);
itclMethod.c:	            Tcl_GetString(imPtr->iclsPtr->fullNamePtr), -1);
itclObject.c:        if (!(iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR))) {
itclObject.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclObject.c:    infoPtr = iclsPtr->infoPtr;
itclObject.c:    if (iclsPtr->flags & (ITCL_ECLASS|ITCL_NWIDGET|ITCL_WIDGET|
itclObject.c:	if (iclsPtr->flags & (ITCL_ECLASS|ITCL_TYPE|ITCL_WIDGET|
itclObject.c:    if (iclsPtr->flags & ITCL_WIDGET) {
itclObject.c:        newObjv[2] = ioPtr->iclsPtr->namePtr;
itclObject.c:        if (ioPtr->iclsPtr->widgetClassPtr != NULL) {
itclObject.c:            newObjv[3] = ioPtr->iclsPtr->widgetClassPtr;
itclObject.c:        if (ioPtr->iclsPtr->hullTypePtr != NULL) {
itclObject.c:            newObjv[4] = ioPtr->iclsPtr->hullTypePtr;
itclObject.c:    if (iclsPtr->flags & (ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclObject.c:    if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclObject.c:            sprintf(unique,"%.200s_%d", name, iclsPtr->unique++);
itclObject.c:    ioPtr->oPtr = Tcl_NewObjectInstance(interp, iclsPtr->clsPtr, objName,
itclObject.c:    Tcl_ObjectSetMetadata(ioPtr->oPtr, iclsPtr->infoPtr->object_meta_type,
itclObject.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objectCmds,
itclObject.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objects,
itclObject.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objectNames,
itclObject.c:    sprintf(str, "ItclInst%d", iclsPtr->infoPtr->numInstances);
itclObject.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->instances,
itclObject.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objectInstances,
itclObject.c:    iclsPtr->infoPtr->numInstances++;
itclObject.c:    if (Tcl_FindHashEntry(&iclsPtr->functions, (char *)objPtr) == NULL) {
itclObject.c:    if (iclsPtr->flags & ITCL_ECLASS) {
itclObject.c:    if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclObject.c:    if (iclsPtr->flags & (ITCL_WIDGETADAPTOR)) {
itclObject.c:	Tcl_AppendToObj(objPtr, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclObject.c:    if (iclsPtr->flags & (ITCL_ECLASS|ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclObject.c:	if (!(ioPtr->iclsPtr->flags & ITCL_CLASS)) {
itclObject.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objectCmds,
itclObject.c:        hPtr = Tcl_CreateHashEntry(&iclsPtr->infoPtr->objects,
itclObject.c:        if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclObject.c:            if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclObject.c:            hPtr = Tcl_FindHashEntry(&iclsPtr->infoPtr->objectCmds,
itclObject.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds,
itclObject.c:            nsPtr = iclsPtr->nsPtr;
itclObject.c:			cmdPtr, iclsPtr->nsPtr);
itclObject.c:			cmdPtr, iclsPtr->nsPtr);
itclObject.c:	            clookup->classCmdInfoPtr, cmdPtr, iclsPtr->nsPtr);
itclObject.c:	            clookup->classCmdInfoPtr, cmdPtr, iclsPtr->nsPtr);
itclObject.c:	            clookup->classCmdInfoPtr, cmdPtr, iclsPtr->nsPtr);
itclObject.c:		hPtr2 = Tcl_FindHashEntry(&ivPtr->iclsPtr->components,
itclObject.c:			    Tcl_GetString(ivPtr->iclsPtr->namePtr), NULL);
itclObject.c:            hPtr2 = Tcl_FindHashEntry(&ivPtr->iclsPtr->resolveVars, varName);
itclObject.c:		                Tcl_GetString(ivPtr->iclsPtr->fullNamePtr), -1);
itclObject.c:            (char *)contextIclsPtr->namePtr) == NULL) {
itclObject.c:    elem = Itcl_FirstListElem(&contextIclsPtr->bases);
itclObject.c:    entry = Tcl_FindHashEntry(&contextIoPtr->iclsPtr->heritage, (char*)iclsPtr);
itclObject.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, (char *)name1);
itclObject.c:    if ((contextIclsPtr == NULL) || (contextIclsPtr->flags &
itclObject.c:                Tcl_GetString(contextIclsPtr->fullNamePtr), -1);
itclObject.c:    if ((contextIclsPtr == NULL) || (contextIclsPtr->flags &
itclObject.c:                Tcl_GetString(contextIclsPtr->fullNamePtr), -1);
itclObject.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, (char *)name1);
itclObject.c:            (contextIclsPtr->flags & (ITCL_ECLASS|ITCL_TYPE|
itclObject.c:                Tcl_GetString(contextIclsPtr->fullNamePtr), -1);
itclObject.c:    entry = Tcl_FirstHashEntry(&iclsPtr->resolveCmds, &place);
itclObject.c:        namePtr  = (Tcl_Obj *)Tcl_GetHashKey(&iclsPtr->resolveCmds, entry);
itclObject.c:			    if (!(imPtr->iclsPtr->flags & ITCL_ECLASS)) {
itclObject.c:			    if (!(imPtr->iclsPtr->flags &
itclObject.c:            Tcl_GetCommandFullName(contextIoPtr->iclsPtr->interp,
itclObject.c:	    if (!isDone && (contextIoPtr->iclsPtr->flags & ITCL_WIDGET)) {
itclObject.c:		        contextIoPtr->iclsPtr->interp,
itclObject.c:        if (!(contextIoPtr->iclsPtr->flags & ITCL_ECLASS)) {
itclObject.c:        Tcl_GetCurrentNamespace(contextIoPtr->iclsPtr->interp)->fullName, -1);
itclObject.c:        if (contextIoPtr->iclsPtr->flags &
itclObject.c:                    contextIoPtr->iclsPtr->interp,
itclObject.c:            Tcl_GetCommandFullName(contextIoPtr->iclsPtr->interp,
itclObject.c:                Tcl_GetString(contextIoPtr->iclsPtr->fullNamePtr), -1);
itclObject.c:            FOREACH_HASH_VALUE(idmPtr, &ioPtr->iclsPtr->delegatedFunctions) {
itclObject.c:	hPtr = Tcl_FindHashEntry(&ioPtr->iclsPtr->variables, (char *)objPtr);
itclObject.c:    infoPtr = imPtr->iclsPtr->infoPtr;
itclObject.c:            elem = Itcl_FirstListElem(&iclsPtr->bases);
itclObject.c:		        (const char *)Tcl_GetString(iclsPtr->namePtr)) == 0) {
itclObject.c:		    clsPtr = iclsPtr->clsPtr;
itclObject.c:		clsPtr = iclsPtr->clsPtr;
itclObject.c:	if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclObject.c:                (const char *)Tcl_GetString(iclsPtr->namePtr)) == 0) {
itclObject.c:        elem = Itcl_FirstListElem(&iclsPtr->bases);
itclObject.c:        elem = Itcl_FirstListElem(&iclsPtr->bases);
itclObject.c:        infoPtr = iclsPtr->infoPtr;
itclObject.c:        myNsPtr = Tcl_GetCurrentNamespace(iclsPtr->interp);
itclObject.c:        if (iclsPtr2 != NULL && myNsPtr == iclsPtr2->nsPtr && Itcl_IsMethodCallFrame(iclsPtr->interp) > 0) {
itclObject.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)methodObj);
itclObject.c:		            &imPtr->iclsPtr->infoPtr->procMethods,
itclObject.c:		            (imPtr->iclsPtr->nsPtr != imPtr2->iclsPtr->nsPtr)) {
itclObject.c:                    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclObject.c:		            (imPtr->iclsPtr->nsPtr == imPtr2->iclsPtr->nsPtr)) {
itclObject.c:                        Tcl_AppendToObj(objPtr, iclsPtr->nsPtr->fullName, -1);
itclObject.c:			if (iclsPtr->flags & ITCL_TYPE) {
itclObject.c:			    Tcl_AppendToObj(strPtr, iclsPtr->nsPtr->name, -1);
itclObject.c:			if (iclsPtr->flags & ITCL_TYPE) {
itclObject.c:                        Tcl_AppendToObj(strPtr, iclsPtr->nsPtr->fullName, -1);
itclObject.c:			if (iclsPtr->flags & ITCL_TYPE) {
itclObject.c:			if (iclsPtr->flags & ITCL_ECLASS) {
itclObject.c:				if (iclsPtr->infoPtr->currIoPtr != NULL) {
itclObject.c:        mPtr = Itcl_NewForwardClassMethod(interp, iclsPtr->clsPtr, 1,
itclObject.c:        mPtr = Itcl_NewForwardClassMethod(interp, iclsPtr->clsPtr, 1,
itclObject.c:    FOREACH_HASH_VALUE(idoPtr, &iclsPtr->delegatedOptions) {
itclObject.c:	    FOREACH_HASH_VALUE(ioptPtr, &iclsPtr->options) {
itclObject.c:            hPtr2 = Tcl_FindHashEntry(&iclsPtr->options,
itclObject.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, (char *)varName);
itclObject.c:        Tcl_AppendToObj(objPtr, iclsPtr->nsPtr->fullName, -1);
itclObject.c:                Tcl_GetString(iclsPtr->infoPtr->currIoPtr->varNsNamePtr), -1);
itclObject.c:        Tcl_DStringAppend(&buffer, ivPtr->iclsPtr->nsPtr->fullName, -1);
itclObject.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclObject.c:	        Tcl_AppendToObj(objPtr, ivPtr->iclsPtr->nsPtr->fullName, -1);
itclObject.c:            FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclObject.c:        FOREACH_HASH_VALUE(ioptPtr, &iclsPtr->options) {
itclParse.c:        iclsPtr->numVariables++;
itclParse.c:    Tcl_AppendResult(interp, Tcl_GetString(iclsPtr->fullNamePtr), NULL);
itclParse.c:    iclsPtr->flags = flags;
itclParse.c:    result = Tcl_Import(interp, iclsPtr->nsPtr, "::itcl::builtin::*",
itclParse.c:    Itcl_SetCallFrameResolver(interp, iclsPtr->resolvePtr);
itclParse.c:	    iclsPtr->flags |= ITCL_CLASS_CONSTRUCT_ERROR;
itclParse.c:    FOREACH_HASH_VALUE(imPtr, &iclsPtr->functions) {
itclParse.c:		if (iclsPtr->flags &
itclParse.c:	        iclsPtr->clsPtr, ItclCheckCallMethod, ItclAfterCallMethod,
itclParse.c:	    hPtr2 = Tcl_CreateHashEntry(&iclsPtr->infoPtr->procMethods,
itclParse.c:	    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclParse.c:		    argumentPtr = iclsPtr->infoPtr->typeDestructorArgumentPtr;
itclParse.c:	            iclsPtr->oPtr, ItclCheckCallMethod, ItclAfterCallMethod,
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclParse.c:        if (Itcl_PushCallFrame(interp, &frame, iclsPtr->nsPtr,
itclParse.c:        FOREACH_HASH_VALUE(ivPtr, &iclsPtr->variables) {
itclParse.c:    if (iclsPtr->typeConstructorPtr != NULL) {
itclParse.c:        if (Itcl_PushCallFrame(interp, &frame, iclsPtr->nsPtr,
itclParse.c:	result = Tcl_EvalObjEx(interp, iclsPtr->typeConstructorPtr,
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclParse.c:        Tcl_DeleteNamespace(iclsPtr->nsPtr);
itclParse.c:    if (Itcl_PushCallFrame(interp, &frame, iclsPtr->nsPtr,
itclParse.c:    FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclParse.c:	        ioPtr = iclsPtr->infoPtr->currIoPtr;
itclParse.c:		            idmPtr->icPtr->ivPtr->iclsPtr->fullNamePtr), -1);
itclParse.c:			    ioPtr->iclsPtr->interp,
itclParse.c:	            if (iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclParse.c:        Tcl_AppendResult(interp, Tcl_GetString(iclsPtr->fullNamePtr),
itclParse.c:    elem = Itcl_FirstListElem(&iclsPtr->bases);
itclParse.c:	    Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclParse.c:    result = Itcl_PushCallFrame(interp, &frame, iclsPtr->nsPtr->parentPtr,
itclParse.c:                "class \"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:        Itcl_AppendList(&iclsPtr->bases, (ClientData)baseClsPtr);
itclParse.c:    elem = Itcl_FirstListElem(&iclsPtr->bases);
itclParse.c:                    "class \"", iclsPtr->fullNamePtr,
itclParse.c:        (void) Tcl_CreateHashEntry(&iclsPtr->heritage,
itclParse.c:            "class \"", Tcl_GetString(iclsPtr->fullNamePtr),
itclParse.c:    elem = Itcl_FirstListElem(&iclsPtr->bases);
itclParse.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclParse.c:    elem = Itcl_FirstListElem(&iclsPtr->bases);
itclParse.c:    if (Tcl_FindHashEntry(&iclsPtr->functions, (char *)objv[0])) {
itclParse.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclParse.c:        iclsPtr->initCode = objv[2];
itclParse.c:        Tcl_IncrRefCount(iclsPtr->initCode);
itclParse.c:    if (iclsPtr->initCode != NULL) {
itclParse.c:	        Tcl_GetString(iclsPtr->initCode)) != TCL_OK) {
itclParse.c:    if (Tcl_FindHashEntry(&iclsPtr->functions, (char *)namePtr)) {
itclParse.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclParse.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions, (char *)objv[1]);
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclParse.c:        FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclParse.c:        FOREACH_HASH_VALUE(idmPtr, &iclsPtr->delegatedFunctions) {
itclParse.c:    iclsPtr->infoPtr->functionFlags = ITCL_TYPE_METHOD;
itclParse.c:	iclsPtr->infoPtr->functionFlags = 0;
itclParse.c:    iclsPtr->infoPtr->functionFlags = 0;
itclParse.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->functions, (char *)namePtr);
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclParse.c:    iclsPtr->numVariables++;
itclParse.c:    iclsPtr->numCommons++;
itclParse.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(ivPtr->iclsPtr->fullNamePtr), -1);
itclParse.c:	        " for class \"", Tcl_GetString(ivPtr->iclsPtr->fullNamePtr),
itclParse.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->classCommons, (char *)ivPtr,
itclParse.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGETADAPTOR)) {
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    newObjv[1] = Tcl_NewStringObj(Tcl_GetString(iclsPtr->fullNamePtr), -1);
itclParse.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedOptions, (char *)objv[1]);
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->components, (char *)componentPtr,
itclParse.c:	if (iclsPtr->flags & (ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    if (iclsPtr->flags & ITCL_ECLASS) {
itclParse.c:	    hPtr2 = Tcl_FindHashEntry(&iclsPtr->functions, (char *)objPtr);
itclParse.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions, (char *)
itclParse.c:	        hPtr = Tcl_FindHashEntry(&iclsPtr->components,
itclParse.c:            hPtr = Tcl_FindHashEntry(&iclsPtr->components,
itclParse.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->functions,
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->delegatedFunctions,
itclParse.c:        hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedOptions, (char *)
itclParse.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->components,
itclParse.c:            hPtr = Tcl_FindHashEntry(&iclsPtr->components,
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->delegatedOptions,
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:	hPtr = Tcl_FindHashEntry(&iclsPtr->components, (char *)componentPtr);
itclParse.c:	hPtr = Tcl_FindHashEntry(&iclsPtr->functions,
itclParse.c:    hPtr = Tcl_CreateHashEntry(&iclsPtr->delegatedFunctions,
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    mPtr = Itcl_NewForwardClassMethod(interp, iclsPtr->clsPtr, 1,
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:        Tcl_AppendResult(interp, "\"", Tcl_GetString(iclsPtr->namePtr),
itclParse.c:    iclsPtr->numVariables++;
itclParse.c:    if (iclsPtr->flags & ITCL_CLASS) {
itclParse.c:    if (iclsPtr->typeConstructorPtr != NULL) {
itclParse.c:            Tcl_GetString(iclsPtr->fullNamePtr), "\"",
itclParse.c:    iclsPtr->typeConstructorPtr = Tcl_NewStringObj(Tcl_GetString(objv[1]), -1);
itclParse.c:    Tcl_IncrRefCount(iclsPtr->typeConstructorPtr);
itclResolve2.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, name);
itclResolve2.c:	hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclResolve2.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, buffer);
itclResolve2.c:	hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclResolve2.c:    callContextPtr = Itcl_PeekStack(&iclsPtr->infoPtr->contextStack);
itclResolve2.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, name);
itclResolve2.c:	    hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclResolve.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclResolve.c:	if ((iclsPtr->flags & ITCL_ECLASS)) {
itclResolve.c:	    hPtr = Tcl_FindHashEntry(&iclsPtr->delegatedFunctions,
itclResolve.c:                hPtr = Tcl_FindHashEntry(&iclsPtr->resolveCmds, (char *)objPtr);
itclResolve.c:    if (iclsPtr->flags & (ITCL_TYPE|ITCL_WIDGET|ITCL_WIDGETADAPTOR)) {
itclResolve.c:	    inOptionHandling = imPtr->iclsPtr->infoPtr->inOptionHandling;
itclResolve.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, name);
itclResolve.c:	hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclResolve.c:                hPtr = Tcl_FindHashEntry(&contextIoPtr->iclsPtr->resolveVars,
itclResolve.c:	if (vlookup->ivPtr->iclsPtr->nsPtr == NULL) {
itclResolve.c:	             vlookup->ivPtr->iclsPtr->nsPtr->fullName, -1);
itclResolve.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, buffer);
itclResolve.c:	hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclResolve.c:    callContextPtr = Itcl_PeekStack(&iclsPtr->infoPtr->contextStack);
itclResolve.c:	if (iclsPtr->infoPtr->currIoPtr != NULL) {
itclResolve.c:	    contextIoPtr = iclsPtr->infoPtr->currIoPtr;
itclResolve.c:                hPtr = Tcl_FindHashEntry(&contextIoPtr->iclsPtr->resolveVars,
itclResolve.c:	    if (vlookup->ivPtr->iclsPtr->nsPtr == NULL) {
itclResolve.c:	                vlookup->ivPtr->iclsPtr->nsPtr->fullName, -1);
itclResolve.c:    hPtr = Tcl_FindHashEntry(&iclsPtr->resolveVars, name);
itclResolve.c:	    hPtr = Tcl_FindHashEntry(&vlookup->ivPtr->iclsPtr->classCommons,
itclUtil.c:            return (iclsPtr->nsPtr == fromNsPtr);
itclUtil.c:	        iclsPtr->infoPtr->class_meta_type);
itclUtil.c:        entry = Tcl_FindHashEntry(&fromIclsPtr->heritage,
itclUtil.c:	hPtr = Tcl_FindHashEntry(&iclsPtr->infoPtr->namespaceClasses,
itclUtil.c:        if (Tcl_FindHashEntry(&iclsPtr->heritage, (char*)fromIclsPtr)) {
itclUtil.c:            entry = Tcl_FindHashEntry(&fromIclsPtr->resolveCmds,
