package provide DS9 1.0

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval xmlrpc {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc xmlrpc::YYABORT {} {
    return -code return 1
}

proc xmlrpc::YYACCEPT {} {
    return -code return 0
}

proc xmlrpc::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc xmlrpc::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc xmlrpc::yyerror {s} {
    puts stderr $s
}

proc xmlrpc::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc xmlrpc::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set xmlrpc::table {
  78:282,target 46
  64:271,target 16
  55:279,target 49
  16:283,target 21
  29:282 shift
  47:265 reduce
  29:283 shift
  30:283 reduce
  77:277,target 80
  60:289 shift
  59:289 reduce
  68:282 shift
  15:278,target 29
  24:269,target 15
  24:270,target 15
  27:312,target 52
  68:283 shift
  1:297 goto
  21:305 goto
  67:282,target 47
  0:296,target 2
  1:298 goto
  1:299 goto
  77:277 shift
  66:277,target 78
  17:267 shift
  38:283 shift
  5:305,target 17
  6:0,target 3
  65:273,target 43
  56:282,target 15
  2:0 accept
  29:305 goto
  40:283,target 25
  39:283,target 24
  68:305 goto
  1:298,target 7
  35:259 shift
  33:258,target 59
  4:269,target 13
  31:271,target 20
  0:294,target 1
  25:0,target 8
  28:283,target 31
  74:283,target 23
  29:315 goto
  56:279 shift
  80:282,target 45
  65:273 reduce
  56:282 shift
  50:276,target 66
  65:274 reduce
  56:283 shift
  56:279,target 71
  65:275 reduce
  63:283,target 19
  68:282,target 15
  26:283 reduce
  42:0 reduce
  14:265 shift
  56:305 goto
  13:265,target 13
  41:283,target 26
  3:262 shift
  15:293,target 37
  74:283 reduce
  48:270,target 14
  48:269,target 14
  47:265,target 11
  29:283,target 16
  30:283,target 34
  32:257 shift
  75:283,target 27
  53:273 reduce
  15:272,target 27
  53:274 reduce
  53:275 reduce
  23:269 shift
  23:270 shift
  23:271 shift
  21:271,target 45
  27:274,target 50
  43:268,target 10
  14:265,target 25
  51:274,target 44
  3:301 goto
  13:261,target 13
  79:275,target 81
  9:0 reduce
  11:268 shift
  11:269 shift
  19:261 shift
  20:261 reduce
  62:291 shift
  23:304 goto
  31:283,target 20
  76:283,target 28
  71:283 reduce
  79:275 shift
  47:261,target 11
  1:300,target 9
  20:265 reduce
  22:271,target 18
  41:283 reduce
  11:302,target 19
  50:275 shift
  80:282 reduce
  50:276 shift
  80:283 reduce
  50:277 shift
  6:0 reduce
  62:291,target 76
  23:304,target 48
  54:283,target 33
  15:286,target 34
  49:283 reduce
  7:0,target 4
  12:304,target 24
  45:271,target 17
  52:274,target 50
  11:302 goto
  42:0,target 9
  81:275,target 42
  1:266,target 5
  5:282,target 15
  11:268,target 12
  29:305,target 55
  0:294 shift
  15:284,target 32
  25:0 reduce
  28:283 reduce
  70:275,target 40
  58:289 reduce
  67:282 reduce
  0:296 goto
  16:267,target 21
  67:283 reduce
  23:271,target 22
  21:283,target 16
  46:271 shift
  50:314 goto
  16:267 reduce
  37:283 reduce
  81:273,target 42
  72:282,target 48
  1:264,target 4
  12:271,target 22
  16:271 reduce
  76:283 reduce
  55:283,target 49
  16:275 reduce
  70:273,target 40
  46:271,target 64
  34:259 shift
  53:274,target 41
  16:279 reduce
  64:270 reduce
  64:269 reduce
  16:282 reduce
  64:271 reduce
  55:279 reduce
  16:283 reduce
  72:279,target 48
  55:282 reduce
  15:311,target 41
  78:283,target 46
  66:259,target 77
  55:283 reduce
  5:282 shift
  5:283 shift
  17:267,target 42
  63:267,target 19
  15:279,target 30
  24:271,target 15
  27:313,target 53
  10:259,target 18
  67:283,target 47
  13:261 reduce
  32:257,target 57
  43:268 reduce
  43:269 reduce
  13:265 reduce
  65:274,target 43
  56:283,target 16
  4:302,target 14
  1:260,target 3
  5:305 goto
  64:270,target 16
  64:269,target 16
  16:282,target 21
  73:283 reduce
  1:299,target 8
  58:289,target 1
  52:273 shift
  52:274 shift
  52:275 shift
  22:269 reduce
  22:270 reduce
  22:271 reduce
  80:283,target 45
  50:277,target 67
  15:306,target 38
  31:267 reduce
  16:279,target 21
  68:283,target 16
  1:297,target 6
  21:305,target 46
  31:271 reduce
  33:257,target 58
  4:268,target 12
  10:259 shift
  31:275 reduce
  70:273 reduce
  8:0,target 5
  70:274 reduce
  70:275 reduce
  50:275,target 65
  31:279 reduce
  7:0 reduce
  29:315,target 56
  63:282,target 19
  31:282 reduce
  52:313,target 70
  48:271,target 14
  31:283 reduce
  61:290 shift
  34:259,target 61
  69:283 reduce
  60:289,target 74
  59:289,target 2
  18:263 shift
  48:270 reduce
  48:269 reduce
  15:273,target 28
  52:313 goto
  48:271 reduce
  31:267,target 20
  3:262,target 10
  40:283 reduce
  39:283 reduce
  33:295,target 60
  27:275,target 51
  78:282 reduce
  43:269,target 10
  78:283 reduce
  66:259 shift
  63:279,target 19
  15:292,target 36
  69:283,target 29
  18:263,target 43
  16:275,target 21
  29:282,target 15
  27:273 shift
  56:305,target 72
  27:274 shift
  51:275,target 44
  27:275 shift
  27:273,target 49
  20:265,target 12
  35:259,target 62
  66:277 shift
  61:290,target 75
  57:288 shift
  15:259 shift
  44:0 reduce
  29:279,target 54
  36:283,target 37
  45:270 reduce
  45:269 reduce
  45:271 reduce
  51:273,target 44
  36:283 reduce
  71:283,target 32
  75:283 reduce
  68:305,target 79
  15:272 shift
  63:275,target 19
  15:287,target 35
  15:273 shift
  31:282,target 20
  33:257 shift
  4:268 shift
  16:271,target 21
  33:258 shift
  4:269 shift
  15:278 shift
  24:269 reduce
  24:270 reduce
  27:312 goto
  63:267 reduce
  52:275,target 51
  15:279 shift
  22:269,target 18
  22:270,target 18
  24:271 reduce
  27:313 goto
  63:271 reduce
  15:283 shift
  15:284 shift
  5:283,target 16
  15:285 shift
  54:283 reduce
  11:269,target 13
  15:286 shift
  19:261,target 44
  20:261,target 12
  63:275 reduce
  15:287 shift
  15:285,target 33
  31:279,target 20
  37:283,target 38
  63:279 reduce
  15:292 shift
  12:303,target 23
  15:293 shift
  63:282 reduce
  45:270,target 17
  45:269,target 17
  63:283 reduce
  52:273,target 69
  15:306 goto
  26:283,target 39
  81:274,target 42
  72:283,target 48
  4:302 goto
  1:260 shift
  15:309 goto
  15:310 goto
  72:279 reduce
  15:311 goto
  9:0,target 6
  12:269 shift
  12:270 shift
  81:273 reduce
  72:282 reduce
  2:0,target 0
  1:264 shift
  12:271 shift
  81:274 reduce
  72:283 reduce
  63:271,target 19
  15:283,target 31
  81:275 reduce
  70:274,target 40
  1:266 shift
  50:314,target 68
  53:275,target 41
  23:269,target 47
  23:270,target 21
  51:273 reduce
  21:282,target 15
  51:274 reduce
  44:0,target 7
  51:275 reduce
  49:283,target 30
  21:271 shift
  33:295 goto
  12:269,target 20
  12:270,target 21
  8:0 reduce
  55:282,target 49
  3:301,target 11
  38:283,target 63
  31:275,target 20
  53:273,target 41
  21:282 shift
  21:283 shift
  57:288,target 73
  12:303 goto
  15:259,target 26
  73:283,target 22
  12:304 goto
  65:275,target 43
  47:261 reduce
  1:300 goto
  15:309,target 39
  15:310,target 40
  29:279 shift
}

array set xmlrpc::rules {
  9,l 300
  11,l 302
  32,l 306
  6,l 297
  28,l 306
  49,l 315
  3,l 296
  25,l 306
  46,l 314
  0,l 316
  22,l 306
  43,l 313
  18,l 304
  40,l 312
  39,l 311
  15,l 303
  36,l 308
  12,l 302
  33,l 306
  7,l 298
  29,l 306
  30,l 306
  4,l 297
  26,l 306
  47,l 314
  1,l 295
  23,l 306
  44,l 313
  19,l 305
  20,l 305
  41,l 312
  16,l 304
  37,l 309
  13,l 302
  34,l 306
  8,l 299
  10,l 301
  31,l 306
  5,l 297
  27,l 306
  48,l 315
  2,l 295
  24,l 306
  45,l 314
  21,l 305
  42,l 313
  17,l 304
  38,l 310
  14,l 303
  35,l 307
}

array set xmlrpc::rules {
  12,dc 2
  26,dc 1
  3,dc 2
  41,dc 1
  18,dc 1
  33,dc 2
  9,dc 3
  47,dc 1
  11,dc 3
  25,dc 1
  2,dc 1
  40,dc 2
  39,dc 1
  17,dc 2
  32,dc 3
  8,dc 3
  46,dc 2
  10,dc 3
  24,dc 1
  1,dc 1
  38,dc 1
  16,dc 3
  31,dc 1
  7,dc 4
  45,dc 3
  23,dc 3
  0,dc 1
  37,dc 1
  15,dc 1
  29,dc 3
  30,dc 2
  6,dc 1
  44,dc 1
  22,dc 3
  36,dc 1
  14,dc 2
  28,dc 3
  5,dc 1
  43,dc 2
  21,dc 1
  35,dc 1
  49,dc 1
  13,dc 1
  27,dc 3
  4,dc 1
  42,dc 4
  19,dc 3
  20,dc 2
  34,dc 1
  48,dc 2
}

array set xmlrpc::rules {
  41,line 143
  7,line 79
  37,line 133
  4,line 74
  34,line 124
  1,line 67
  31,line 121
  27,line 115
  24,line 112
  21,line 107
  17,line 101
  14,line 96
  11,line 91
  49,line 157
  46,line 152
  43,line 147
  9,line 85
  40,line 142
  39,line 139
  6,line 76
  36,line 130
  3,line 71
  33,line 123
  29,line 118
  30,line 119
  26,line 114
  23,line 111
  19,line 105
  20,line 106
  16,line 100
  13,line 93
  10,line 88
  48,line 156
  45,line 151
  42,line 146
  8,line 82
  38,line 136
  5,line 75
  35,line 127
  2,line 68
  32,line 122
  28,line 117
  25,line 113
  22,line 110
  18,line 102
  15,line 97
  12,line 92
  47,line 153
  44,line 148
}

array set xmlrpc::lr1_table {
  35 {{23 283 1} {1 289 0} {2 289 0}}
  66,trans {}
  36 {{27 283 1}}
  85,trans {}
  37 {{28 283 1}}
  38 {{37 283 1}}
  39 {{38 283 1}}
  40 {{19 267 2}}
  41 {{24 283 1}}
  42 {{25 283 1}}
  43 {{26 283 1}}
  44 {{9 0 3}}
  45 {{10 {268 269} 3}}
  46 {{12 261 2}}
  47 {{11 261 2} {14 {269 270 271} 1} {16 {269 270 271} 0} {17 {269 270 271} 0} {18 {269 270 271} 0}}
  48 {{7 0 4}}
  49 {{17 {269 270 271} 2}}
  50 {{19 271 1} {20 271 1} {22 283 0} {23 283 0} {24 283 0} {25 283 0} {26 283 0} {27 283 0} {28 283 0} {29 283 0} {30 283 0} {31 283 0} {32 283 0} {33 283 0} {34 283 0} {37 283 0} {38 283 0} {39 283 0}}
  27,trans {}
  51 {{21 271 1}}
  46,trans {}
  52 {{16 {269 270 271} 2}}
  65,trans {{288 86}}
  53 {{11 265 3}}
  84,trans {}
  54 {{14 {269 270 271} 2}}
  55 {{30 283 2}}
  56 {{42 {273 274 275} 1} {43 {273 274 275} 1} {45 {282 283} 0} {46 {282 283} 0} {47 {282 283} 0}}
  57 {{44 {273 274 275} 1}}
  58 {{29 283 2} {40 {273 274 275} 1} {42 {273 274 275} 0} {43 {273 274 275} 0} {44 {273 274 275} 0}}
  59 {{41 {273 274 275} 1}}
  60 {{33 283 2}}
  61 {{19 {279 282 283} 1} {20 {279 282 283} 1} {22 283 0} {23 283 0} {24 283 0} {25 283 0} {26 283 0} {27 283 0} {28 283 0} {29 283 0} {30 283 0} {31 283 0} {32 283 0} {33 283 0} {34 283 0} {37 283 0} {38 283 0} {39 283 0}}
  62 {{21 {279 282 283} 1}}
  63 {{49 {279 282 283} 1}}
  64 {{32 283 2} {48 {279 282 283} 1} {19 {279 282 283} 0} {20 {279 282 283} 0} {21 {279 282 283} 0}}
  65 {{22 283 2}}
  26,trans {}
  66 {{1 289 1}}
  67 {{2 289 1}}
  45,trans {}
  68 {{23 283 2}}
  64,trans {{279 84} {282 61} {283 62} {305 85}}
  69 {{27 283 2}}
  70 {{28 283 2}}
  83,trans {{283 96}}
  71 {{19 267 3}}
  72 {{11 261 3}}
  73 {{20 271 2}}
  74 {{19 271 2}}
  75 {{16 {269 270 271} 3}}
  76 {{43 {273 274 275} 2}}
  77 {{45 {282 283} 1} {46 {282 283} 1}}
  78 {{47 {282 283} 1}}
  79 {{42 {273 274 275} 2} {19 275 0} {20 275 0} {21 275 0}}
  80 {{29 283 3}}
  81 {{40 {273 274 275} 2}}
  82 {{20 {279 282 283} 2}}
  25,trans {{269 53} {270 23} {271 24} {304 54}}
  83 {{19 {279 282 283} 2}}
  44,trans {}
  84 {{32 283 3}}
  63,trans {}
  85 {{48 {279 282 283} 2}}
  86 {{22 283 3}}
  82,trans {}
  87 {{23 283 3}}
  0 {{0 0 0} {3 0 0}}
  88 {{27 283 3}}
  1 {{3 0 1} {4 0 0} {5 0 0} {6 0 0} {7 0 0} {8 0 0} {9 0 0}}
  89 {{28 283 3}}
  90 {{19 271 3}}
  2 {{0 0 1}}
  91 {{45 {282 283} 2}}
  3 {{7 0 1} {10 {268 269} 0}}
  92 {{46 {282 283} 2}}
  4 {{8 0 1} {11 265 0} {12 265 0} {13 265 0}}
  93 {{19 275 1} {20 275 1} {22 283 0} {23 283 0} {24 283 0} {25 283 0} {26 283 0} {27 283 0} {28 283 0} {29 283 0} {30 283 0} {31 283 0} {32 283 0} {33 283 0} {34 283 0} {37 283 0} {38 283 0} {39 283 0}}
  5 {{9 0 1} {19 267 0} {20 267 0} {21 267 0}}
  94 {{21 275 1}}
  6 {{3 0 2}}
  95 {{42 {273 274 275} 3}}
  7 {{4 0 1}}
  96 {{19 {279 282 283} 3}}
  8 {{5 0 1}}
  97 {{45 {282 283} 3}}
  9 {{6 0 1}}
  98 {{20 275 2}}
  99 {{19 275 2}}
  24,trans {}
  43,trans {}
  62,trans {}
  81,trans {}
  99,trans {{283 101}}
  23,trans {{271 49} {282 50} {283 51} {305 52}}
  42,trans {}
  61,trans {{259 28} {272 29} {273 30} {278 31} {279 32} {283 82} {284 34} {285 35} {286 36} {287 37} {292 38} {293 39} {306 83} {309 41} {310 42} {311 43}}
  79,trans {{282 93} {283 94} {305 95}}
  80,trans {}
  98,trans {}
  9,trans {}
  22,trans {}
  41,trans {}
  59,trans {}
  60,trans {}
  78,trans {}
  97,trans {}
  8,trans {}
  100 {{42 {273 274 275} 4}}
  101 {{19 275 3}}
  21,trans {{261 48}}
  39,trans {}
  40,trans {{283 71}}
  58,trans {{273 80} {274 56} {275 57} {313 81}}
  77,trans {{259 91} {277 92}}
  96,trans {}
  7,trans {}
  19,trans {{269 46} {270 23} {271 24} {303 47} {304 26}}
  20,trans {}
  38,trans {}
  57,trans {}
  76,trans {}
  95,trans {{275 100}}
  6,trans {}
  18,trans {{263 45}}
  37,trans {{259 70}}
  56,trans {{275 76} {276 77} {277 78} {314 79}}
  75,trans {}
  94,trans {}
  5,trans {{282 15} {283 16} {305 17}}
  17,trans {{267 44}}
  36,trans {{259 69}}
  55,trans {}
  74,trans {{283 90}}
  93,trans {{259 28} {272 29} {273 30} {278 31} {279 32} {283 98} {284 34} {285 35} {286 36} {287 37} {292 38} {293 39} {306 99} {309 41} {310 42} {311 43}}
  4,trans {{268 12} {269 13} {302 14}}
  16,trans {}
  35,trans {{257 66} {258 67} {295 68}}
  54,trans {}
  73,trans {}
  3,trans {{262 10} {301 11}}
  92,trans {}
  15,trans {{259 28} {272 29} {273 30} {278 31} {279 32} {283 33} {284 34} {285 35} {286 36} {287 37} {292 38} {293 39} {306 40} {309 41} {310 42} {311 43}}
  34,trans {{257 65}}
  53,trans {}
  72,trans {}
  2,trans {}
  91,trans {{277 97}}
  14,trans {{265 27}}
  33,trans {}
  52,trans {{271 75}}
  71,trans {}
  1,trans {{260 3} {264 4} {266 5} {297 6} {298 7} {299 8} {300 9}}
  89,trans {}
  90,trans {}
  13,trans {}
  32,trans {}
  51,trans {}
  69,trans {{290 88}}
  70,trans {{291 89}}
  0,trans {{294 1} {296 2}}
  88,trans {}
  12,trans {{269 22} {270 23} {271 24} {303 25} {304 26}}
  31,trans {{279 60} {282 61} {283 62} {305 63} {315 64}}
  49,trans {}
  50,trans {{259 28} {272 29} {273 30} {278 31} {279 32} {283 73} {284 34} {285 35} {286 36} {287 37} {292 38} {293 39} {306 74} {309 41} {310 42} {311 43}}
  68,trans {{289 87}}
  87,trans {}
  101,trans {}
  10 {{10 {268 269} 1}}
  11 {{7 0 2} {11 261 0} {12 261 0} {13 261 0}}
  12 {{11 265 1} {12 265 1} {14 {269 270 271} 0} {15 {269 270 271} 0} {16 {269 270 271} 0} {17 {269 270 271} 0} {18 {269 270 271} 0}}
  13 {{13 265 1}}
  14 {{8 0 2}}
  11,trans {{268 19} {269 20} {302 21}}
  15 {{19 267 1} {20 267 1} {22 283 0} {23 283 0} {24 283 0} {25 283 0} {26 283 0} {27 283 0} {28 283 0} {29 283 0} {30 283 0} {31 283 0} {32 283 0} {33 283 0} {34 283 0} {37 283 0} {38 283 0} {39 283 0}}
  16 {{21 267 1}}
  29,trans {{273 55} {274 56} {275 57} {312 58} {313 59}}
  30,trans {}
  17 {{9 0 2}}
  48,trans {}
  18 {{10 {268 269} 2}}
  67,trans {}
  20 {{13 261 1}}
  19 {{11 261 1} {12 261 1} {14 {269 270 271} 0} {15 {269 270 271} 0} {16 {269 270 271} 0} {17 {269 270 271} 0} {18 {269 270 271} 0}}
  86,trans {}
  21 {{7 0 3}}
  22 {{12 265 2}}
  100,trans {}
  23 {{16 {269 270 271} 1} {17 {269 270 271} 1} {19 271 0} {20 271 0} {21 271 0}}
  24 {{18 {269 270 271} 1}}
  25 {{11 265 2} {14 {269 270 271} 1} {16 {269 270 271} 0} {17 {269 270 271} 0} {18 {269 270 271} 0}}
  26 {{15 {269 270 271} 1}}
  27 {{8 0 3}}
  28 {{39 283 1}}
  30 {{31 283 1}}
  29 {{29 283 1} {30 283 1} {40 {273 274 275} 0} {41 {273 274 275} 0} {42 {273 274 275} 0} {43 {273 274 275} 0} {44 {273 274 275} 0}}
  31 {{32 283 1} {33 283 1} {48 {279 282 283} 0} {49 {279 282 283} 0} {19 {279 282 283} 0} {20 {279 282 283} 0} {21 {279 282 283} 0}}
  32 {{34 283 1}}
  10,trans {{259 18}}
  33 {{20 267 2}}
  28,trans {}
  34 {{22 283 1}}
  47,trans {{269 72} {270 23} {271 24} {304 54}}
}

array set xmlrpc::token_id_table {
  286 BASE64_
  286,t 0
  287 DATETIME_
  292,line 56
  302,line 90
  288 _INTEGER_
  265,title _METHODRESPONSE
  289 _DOUBLE_
  290 _BASE64_
  300 fault
  284,title INTEGER
  291 _DATETIME_
  301 methodName
  313,title {}
  292 TRUE_
  302 params
  288,line 51
  293 FALSE_
  303 xparam
  304 param
  294 HEADER_
  305 value
  295 numeric
  306 type
  296 command
  307 int
  262,t 0
  297 which
  308 double
  285,line 47
  298 methodCall
  310 false
  309 true
  299 methodResponse
  311 str
  283,t 0
  312 members
  313 member
  314,t 1
  314 name
  282,line 43
  315 values
  316 start'
  264,title METHODRESPONSE
  283,title _VALUE
  312,title {}
  278,line 38
  error,line 65
  258,t 0
  275,line 34
  279,t 0
  280,t 0
  311,t 1
  272,line 31
  263,title _METHODNAME
  282,title VALUE
  311,title {}
  268,line 25
  276,t 0
  265,line 20
  307,t 1
  297,t 1
  262,line 16
  262,title METHODNAME
  0 {$}
  0,t 0
  281,title _DATA
  310,title {}
  309,title {}
  error,t 0
  299,title {}
  258,line 8
  273,t 0
  304,t 1
  294,t 0
  261,title _METHODCALL
  279,title _ARRAY
  280,title DATA
  308,title {}
  269,t 0
  270,t 0
  298,title {}
  314,line 150
  291,t 0
  301,t 1
  311,line 138
  307,line 126
  266,t 0
  260,title METHODCALL
  259,title string
  297,line 73
  278,title ARRAY
  307,title {}
  297,title {}
  287,t 0
  304,line 99
  294,line 59
  291,line 54
  error,title {}
  301,line 87
  263,t 0
  258,title float
  287,line 49
  277,title _NAME
  284,t 0
  306,title {}
  296,title {}
  315,t 1
  284,line 46
  281,line 41
  260,t 0
  259,t 0
  281,t 0
  257,title integer
  277,line 36
  276,title NAME
  312,t 1
  305,title {}
  295,title {}
  274,line 33
  271,line 29
  277,t 0
  308,t 1
  267,line 23
  298,t 1
  275,title _MEMBER
  304,title {}
  294,title string
  264,line 19
  261,line 15
  274,t 0
  305,t 1
  295,t 1
  257,line 7
  274,title MEMBER
  293,title FALSE
  303,title {}
  271,t 0
  error error
  292,t 0
  302,t 1
  316,line 158
  273,title _STRUCT
  313,line 145
  292,title TRUE
  302,title {}
  267,t 0
  310,line 135
  309,line 132
  299,line 81
  288,t 0
  306,line 109
  296,line 70
  272,title STRUCT
  303,line 95
  291,title _DATETIME
  293,line 57
  301,title {}
  264,t 0
  285,t 0
  289,line 52
  290,line 53
  300,line 84
  316,t 1
  286,line 48
  271,title _PARAM
  261,t 0
  283,line 44
  289,title _DOUBLE
  290,title _BASE64
  300,title {}
  282,t 0
  279,line 39
  280,line 40
  313,t 1
  276,line 35
  257,t 0
  269,title _PARAMS
  270,title PARAM
  273,line 32
  288,title _INTEGER
  278,t 0
  310,t 1
  309,t 1
  299,t 1
  269,line 26
  270,line 28
  266,line 22
  268,title PARAMS
  275,t 0
  263,line 17
  287,title DATETIME
  316,title {}
  306,t 1
  296,t 1
  260,line 14
  259,line 10
  272,t 0
  267,title _FAULT
  303,t 1
  257 INT_
  286,title BASE64
  293,t 0
  315,title {}
  258 REAL_
  260 METHODCALL_
  259 STRING_
  261 _METHODCALL_
  262 METHODNAME_
  263 _METHODNAME_
  264 METHODRESPONSE_
  315,line 155
  265 _METHODRESPONSE_
  266 FAULT_
  267 _FAULT_
  268,t 0
  268 PARAMS_
  269 _PARAMS_
  270 PARAM_
  312,line 141
  271 _PARAM_
  272 STRUCT_
  289,t 0
  290,t 0
  300,t 1
  266,title FAULT
  273 _STRUCT_
  274 MEMBER_
  285,title DOUBLE
  314,title {}
  275 _MEMBER_
  308,line 129
  276 NAME_
  298,line 78
  277 _NAME_
  278 ARRAY_
  279 _ARRAY_
  280 DATA_
  281 _DATA_
  305,line 104
  282 VALUE_
  295,line 66
  265,t 0
  283 _VALUE_
  284 INTEGER_
  285 DOUBLE_
}

proc xmlrpc::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { set _ $1 }
                    2 { set _ $1 }
                    3 { global parse; set parse(result) $2 }
                    4 { set _ [list $1] }
                    5 { set _ [list $1] }
                    6 { set _ [list $1] }
                    7 { set _ [list methodcall [list $2 $3]] }
                    8 { set _ [list methodresponse $2] }
                    9 { set _ [list fault $2] }
                    10 { set _ [list methodname $2] }
                    11 { set _ [list params $2] }
                    12 { set _ [list params {}] }
                    13 { set _ [list params {}] }
                    14 { lappend _ $2 }
                    15 { set _ [list $1] }
                    16 { set _ [list param $2] }
                    17 { set _ [list param {}] }
                    18 { set _ [list param {}] }
                    19 { set _ [list value $2] }
                    20 { set _ [list value {}] }
                    21 { set _ [list value {}] }
                    22 { set _ $2 }
                    23 { set _ $2 }
                    24 { set _ $1 }
                    25 { set _ $1 }
                    26 { set _ $1 }
                    27 { set _ $2 }
                    28 { set _ $2 }
                    29 { set _ [list struct $2] }
                    30 { set _ [list struct {}] }
                    31 { set _ [list struct {}] }
                    32 { set _ [list array [list data $2]] }
                    33 { set _ [list array {}] }
                    34 { set _ [list array {}] }
                    35 { set _ [list int $2] }
                    36 { set _ [list double $2] }
                    37 { set _ [list boolean 1] }
                    38 { set _ [list boolean 0] }
                    39 { set _ [list string "$1"] }
                    40 { lappend _ $2 }
                    41 { set _ [list $1] }
                    42 { set _ [list member [list $2 $3]] }
                    43 { set _ [list member {}] }
                    44 { set _ [list member {}] }
                    45 { set _ [list name $2] }
                    46 { set _ [list name {}] }
                    47 { set _ [list name {}] }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc xmlrpc::yyerror {msg} {
     variable yycnt
     variable yy_current_buffer
     variable index_

     ParserError $msg $yycnt $yy_current_buffer $index_
}
