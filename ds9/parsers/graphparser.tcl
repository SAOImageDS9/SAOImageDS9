package provide DS9 1.0

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval graph {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc graph::YYABORT {} {
    return -code return 1
}

proc graph::YYACCEPT {} {
    return -code return 0
}

proc graph::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc graph::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc graph::yyerror {s} {
    puts stderr $s
}

proc graph::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc graph::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set graph::table {
  12:277,target 5
  9:262,target 16
  9:283 goto
  5:0,target 0
  15:0,target 4
  9:0 reduce
  11:0 reduce
  8:277,target 10
  6:290,target 8
  9:261,target 15
  15:0 reduce
  3:277,target 23
  15:277,target 4
  6:0,target 20
  16:0,target 7
  11:277 reduce
  13:277 reduce
  9:260,target 14
  9:259,target 13
  15:277 reduce
  6:0 reduce
  17:277 reduce
  0:278 shift
  4:279,target 27
  6:277,target 21
  0:280 shift
  17:0,target 25
  12:0 reduce
  9:258,target 12
  0:281 shift
  10:0,target 22
  0:282 shift
  1:277,target 24
  2:279 reduce
  4:279 reduce
  6:277 reduce
  16:0 reduce
  13:277,target 3
  8:277 shift
  9:257,target 11
  0:289 goto
  3:0 reduce
  0:291 goto
  1:0,target 24
  7:279,target 9
  9:277,target 1
  11:0,target 2
  0:292 goto
  0:282,target 4
  2:279,target 26
  0:292,target 7
  6:290 goto
  16:277,target 7
  13:0 reduce
  9:0,target 1
  11:277,target 2
  12:0,target 5
  0:281,target 3
  0:291,target 6
  9:257 shift
  17:0 reduce
  9:258 shift
  9:260 shift
  9:259 shift
  9:261 shift
  12:277 reduce
  9:262 shift
  14:277 reduce
  0:280,target 2
  0:289,target 5
  3:0,target 23
  16:277 reduce
  13:0,target 3
  14:277,target 6
  10:0 reduce
  1:277 reduce
  3:277 reduce
  0:278,target 1
  14:0 reduce
  14:0,target 6
  1:0 reduce
  7:279 shift
  9:283,target 17
  9:277 reduce
  17:277,target 25
  5:0 accept
}

array set graph::rules {
  27,l 292
  9,l 284
  11,l 285
  15,l 287
  20,l 289
  19,l 288
  2,l 283
  24,l 291
  6,l 283
  12,l 285
  16,l 287
  21,l 290
  3,l 283
  25,l 291
  7,l 283
  13,l 286
  0,l 293
  17,l 287
  22,l 289
  4,l 283
  26,l 292
  8,l 284
  10,l 284
  14,l 286
  18,l 288
  1,l 283
  23,l 291
  5,l 283
}

array set graph::rules {
  23,dc 1
  5,dc 1
  0,dc 1
  17,dc 1
  12,dc 1
  26,dc 1
  8,dc 1
  21,dc 0
  3,dc 1
  15,dc 1
  10,dc 1
  24,dc 1
  6,dc 1
  18,dc 1
  1,dc 0
  13,dc 1
  27,dc 1
  9,dc 1
  22,dc 3
  4,dc 1
  16,dc 1
  11,dc 1
  25,dc 3
  7,dc 1
  20,dc 1
  19,dc 1
  2,dc 1
  14,dc 1
}

array set graph::rules {
  13,line 89
  25,line 108
  7,line 78
  10,line 82
  22,line 103
  4,line 75
  18,line 98
  1,line 72
  15,line 93
  21,e 1
  27,line 112
  9,line 81
  12,line 86
  24,line 107
  6,line 77
  21,line 102
  3,line 74
  17,line 95
  14,line 90
  26,line 111
  8,line 80
  11,line 85
  23,line 106
  5,line 76
  20,line 102
  19,line 99
  2,line 73
  16,line 94
}

array set graph::lr1_table {
  13,trans {}
  17 {{25 {0 277} 3}}
  0 {{0 0 0} {20 0 0} {22 0 0} {23 {0 277} 0} {24 {0 277} 0} {25 {0 277} 0} {26 279 0} {27 279 0}}
  14,trans {}
  1 {{24 {0 277} 1}}
  15,trans {}
  2 {{26 279 1}}
  16,trans {}
  3 {{23 {0 277} 1}}
  17,trans {}
  4 {{27 279 1}}
  0,trans {{278 1} {280 2} {281 3} {282 4} {289 5} {291 6} {292 7}}
  5 {{0 0 1}}
  1,trans {}
  6 {{20 0 1} {22 0 1} {21 277 0}}
  2,trans {}
  7 {{25 {0 277} 1}}
  3,trans {}
  8 {{22 0 2}}
  4,trans {}
  10 {{22 0 3}}
  9 {{25 {0 277} 2} {1 {0 277} 0} {2 {0 277} 0} {3 {0 277} 0} {4 {0 277} 0} {5 {0 277} 0} {6 {0 277} 0} {7 {0 277} 0}}
  5,trans {}
  11 {{2 {0 277} 1}}
  6,trans {{290 8}}
  12 {{5 {0 277} 1}}
  7,trans {{279 9}}
  13 {{3 {0 277} 1}}
  8,trans {{277 10}}
  10,trans {}
  9,trans {{257 11} {258 12} {259 13} {260 14} {261 15} {262 16} {283 17}}
  14 {{6 {0 277} 1}}
  11,trans {}
  15 {{4 {0 277} 1}}
  12,trans {}
  16 {{7 {0 277} 1}}
}

array set graph::token_id_table {
  286,t 1
  286 fontSlant
  280,title HORIZONTAL
  279,title GRID
  264,line 15
  292,line 110
  287 fontStyle
  270,t 0
  269,t 0
  288 numeric
  290 @PSEUDO1
  289 command
  276,line 28
  265,title FONTSLANT
  291,t 1
  291 graph
  284,title {}
  292 type
  274,t 0
  261,line 11
  293 start'
  288,line 97
  257,t 0
  270,title COURIER
  269,title HELVETICA
  288,title {}
  273,line 24
  278,t 0
  257,line 7
  262,t 0
  285,line 84
  274,title ITALIC
  293,title {}
  283,t 1
  270,line 21
  269,line 20
  259,title ON
  260,title OFF
  266,t 0
  278,title CLOSE
  282,line 38
  287,t 1
  error error
  271,t 0
  264,title FONTSIZE
  266,line 17
  283,title {}
  292,t 1
  278,line 34
  error,line 70
  275,t 0
  268,title TIMES
  287,title {}
  258,t 0
  263,line 14
  291,line 105
  error,title {}
  280,t 0
  279,t 0
  275,line 27
  273,title ROMAN
  292,title {}
  263,t 0
  259,line 9
  260,line 10
  287,line 92
  258,title NO
  284,t 1
  277,title string
  272,line 23
  267,t 0
  263,title FONT
  288,t 1
  284,line 79
  282,title VERTICAL
  272,t 0
  268,line 19
  267,title FONTWEIGHT
  293,t 1
  286,title {}
  257 YES_
  281,line 37
  276,t 0
  258 NO_
  259,t 0
  259 ON_
  260 OFF_
  260,t 0
  272,title BOLD
  261 TRUE_
  265,line 16
  293,line 113
  291,title {}
  262 FALSE_
  281,t 0
  263 FONT_
  277,line 30
  257,title YES
  264 FONTSIZE_
  264,t 0
  276,title float
  265 FONTSLANT_
  262,line 12
  266 FONTSTYLE_
  290,line 102
  289,line 101
  285,t 1
  267 FONTWEIGHT_
  0,t 0
  0 {$}
  262,title FALSE
  268 TIMES_
  268,t 0
  281,title OPEN
  274,line 25
  270 COURIER_
  269 HELVETICA_
  error,t 0
  271 NORMAL_
  290,t 1
  289,t 1
  272 BOLD_
  258,line 8
  286,line 88
  273,t 0
  273 ROMAN_
  266,title FONTSTYLE
  285,title {}
  274 ITALIC_
  275 INT_
  271,line 22
  276 REAL_
  277,t 0
  277 STRING_
  271,title NORMAL
  290,title {}
  289,title {}
  283,line 71
  278 CLOSE_
  261,t 0
  280 HORIZONTAL_
  279 GRID_
  281 OPEN_
  267,line 18
  282,t 0
  282 VERTICAL_
  275,title integer
  283 yesno
  265,t 0
  284 font
  280,line 36
  279,line 35
  285 fontWeight
  261,title TRUE
}

proc graph::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { set _ 1 }
                    2 { set _ 1 }
                    3 { set _ 1 }
                    4 { set _ 1 }
                    5 { set _ 0 }
                    6 { set _ 0 }
                    7 { set _ 0 }
                    8 { set _ times }
                    9 { set _ helvetica }
                    10 { set _ courier }
                    11 { set _ normal }
                    12 { set _ bold }
                    13 { set _ roman }
                    14 { set _ italic }
                    15 { set _ normal }
                    16 { set _ bold }
                    17 { set _ italic }
                    18 { set _ $1 }
                    19 { set _ $1 }
                    21 { global ds9; if {!$ds9(init)} {YYERROR} else {yyclearin; YYACCEPT} }
                    23 { GraphDialog }
                    24 { GraphDestroyDialog }
                    25 { ProcessCmdSet graph $1,grid $3 UpdateGraphsGrid }
                    26 { set _ horz }
                    27 { set _ vert }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc graph::yyerror {msg} {
     variable yycnt
     variable yy_current_buffer
     variable index_

     ParserError $msg $yycnt $yy_current_buffer $index_
}
