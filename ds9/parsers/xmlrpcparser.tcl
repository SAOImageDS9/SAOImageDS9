package provide DS9 1.0

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval xmlrpc {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc xmlrpc::YYABORT {} {
    return -code return 1
}

proc xmlrpc::YYACCEPT {} {
    return -code return 0
}

proc xmlrpc::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc xmlrpc::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc xmlrpc::yyerror {s} {
    puts stderr $s
}

proc xmlrpc::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc xmlrpc::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set xmlrpc::table {
  41:268,target 13
  3:288,target 11
  27:0 reduce
  15:278,target 32
  43:296,target 54
  47:270 reduce
  17:264 reduce
  43:275,target 52
  17:268 reduce
  58:270,target 16
  58:269,target 15
  6:0,target 1
  17:269 reduce
  17:270 reduce
  28:264,target 20
  65:273,target 31
  2:0 accept
  29:294 goto
  29:295 goto
  17:274 reduce
  56:272 reduce
  41:266,target 13
  26:266 reduce
  56:273 reduce
  47:270,target 27
  17:264,target 18
  26:267 reduce
  56:274 reduce
  24:267,target 17
  26:268 reduce
  40:262,target 10
  17:280 reduce
  17:282 reduce
  65:272 reduce
  22:258,target 11
  25:291,target 41
  65:273 reduce
  65:274 reduce
  54:292,target 61
  62:278,target 66
  11:258,target 20
  23:282,target 17
  61:274,target 65
  14:262 shift
  59:270,target 35
  59:269,target 35
  57:282,target 38
  44:272 reduce
  3:259 shift
  44:273 reduce
  49:274,target 19
  44:274 reduce
  15:293,target 34
  48:270,target 16
  48:269,target 15
  18:264,target 35
  53:270 reduce
  53:269 reduce
  5:270,target 16
  5:269,target 15
  25:267,target 23
  4:265,target 12
  15:272,target 30
  23:268 shift
  23:269 shift
  23:270 shift
  44:273,target 33
  57:280,target 38
  36:265,target 9
  53:282 reduce
  37:0,target 5
  32:270 reduce
  16:274,target 21
  35:0 reduce
  62:278 shift
  11:258 shift
  23:282 shift
  15:270,target 28
  41:266 reduce
  58:282,target 17
  41:267 reduce
  41:268 reduce
  3:288 goto
  51:274,target 32
  11:265 shift
  11:266 shift
  49:270,target 19
  49:269,target 19
  49:264 reduce
  9:0 reduce
  56:273,target 29
  19:260 shift
  23:292 goto
  26:267,target 14
  50:266 reduce
  50:267 reduce
  50:268 reduce
  49:268 reduce
  49:270 reduce
  49:269 reduce
  45:273,target 43
  52:276,target 59
  58:280,target 62
  49:274 reduce
  28:274,target 20
  51:272,target 32
  58:270 shift
  58:269 shift
  6:0 reduce
  13:258,target 12
  28:264 reduce
  50:267,target 15
  49:280 reduce
  17:274,target 18
  49:282 reduce
  7:0,target 2
  28:268 reduce
  0:281 shift
  16:269,target 21
  16:270,target 21
  28:269 reduce
  28:270 reduce
  59:282,target 35
  38:267,target 16
  1:287,target 9
  0:283 goto
  11:289 goto
  58:280 shift
  28:274 reduce
  0:283,target 2
  11:289,target 21
  58:282 shift
  48:282,target 17
  36:258,target 9
  5:282,target 17
  28:280 reduce
  19:260,target 36
  23:292,target 39
  28:282 reduce
  29:295,target 46
  31:278,target 47
  46:273,target 30
  58:292 goto
  1:285,target 7
  16:264 reduce
  29:274,target 44
  46:272 reduce
  46:273 reduce
  0:281,target 1
  28:269,target 20
  28:270,target 20
  46:274 reduce
  16:268 reduce
  16:269 reduce
  16:270 reduce
  55:270 reduce
  11:266,target 13
  16:274 reduce
  17:269,target 18
  17:270,target 18
  63:270,target 37
  63:269,target 37
  15:282,target 33
  25:266 shift
  5:270 shift
  5:269 shift
  25:267 shift
  25:268 shift
  23:268,target 38
  12:290,target 25
  16:280 reduce
  29:272,target 42
  64:270 reduce
  64:269 reduce
  16:282 reduce
  49:282,target 19
  12:268,target 24
  34:270 shift
  5:282 shift
  13:258 reduce
  58:292,target 63
  64:282 reduce
  13:262 reduce
  30:270,target 25
  43:276,target 53
  22:262,target 11
  49:280,target 19
  5:292 goto
  65:274,target 31
  22:258 reduce
  25:291 goto
  43:274 shift
  12:266,target 22
  43:275 shift
  64:270,target 34
  64:269,target 34
  43:276 shift
  16:282,target 21
  22:262 reduce
  41:267,target 13
  15:277,target 31
  24:268,target 17
  53:270,target 36
  53:269,target 36
  52:276 shift
  43:274,target 51
  65:272,target 31
  42:270,target 24
  4:289,target 14
  1:257,target 3
  52:282 shift
  40:258 reduce
  61:274 shift
  16:280,target 21
  40:262 reduce
  24:266,target 17
  43:296 goto
  28:282,target 20
  8:0,target 3
  48:292,target 57
  39:268 shift
  5:292,target 18
  31:278 shift
  31:279 shift
  7:0 reduce
  17:282,target 18
  63:282,target 37
  25:268,target 24
  35:0,target 8
  27:0,target 7
  54:270,target 16
  54:269,target 15
  48:270 shift
  48:269 shift
  4:266,target 13
  18:264 shift
  20:0,target 6
  52:282,target 60
  40:258,target 10
  28:280,target 20
  44:274,target 33
  36:266,target 9
  57:270 reduce
  57:269 reduce
  10:282 shift
  17:280,target 18
  63:280,target 37
  48:282 shift
  36:258 reduce
  25:266,target 40
  32:270,target 28
  15:271,target 29
  66:270 reduce
  57:280 reduce
  44:272,target 33
  36:265 reduce
  3:259,target 10
  36:266 reduce
  66:270,target 26
  57:282 reduce
  64:282,target 34
  48:292 goto
  13:262,target 12
  56:274,target 29
  26:268,target 14
  45:295,target 56
  55:270,target 23
  48:297 goto
  53:282,target 36
  45:274,target 44
  45:272 shift
  51:273,target 32
  45:273 shift
  45:274 shift
  15:270 shift
  50:268,target 15
  49:268,target 19
  15:271 shift
  56:272,target 29
  4:265 shift
  15:272 shift
  26:266,target 14
  54:270 shift
  54:269 shift
  33:270,target 22
  4:266 shift
  20:0 reduce
  24:266 reduce
  24:267 reduce
  38:268,target 16
  15:277 shift
  24:268 reduce
  45:272,target 55
  15:278 shift
  63:270 reduce
  63:269 reduce
  14:262,target 27
  15:282 shift
  54:282 shift
  50:266,target 15
  33:270 reduce
  54:282,target 17
  45:295 goto
  31:279,target 48
  46:274,target 30
  37:0 reduce
  16:268,target 21
  63:280 reduce
  38:266,target 16
  1:286,target 8
  15:293 goto
  63:282 reduce
  54:292 goto
  42:270 reduce
  4:289 goto
  1:257 shift
  12:266 shift
  1:261 shift
  12:267 shift
  21:258 shift
  34:270,target 49
  12:268 shift
  49:264,target 19
  9:0,target 4
  1:263 shift
  2:0,target 0
  29:294,target 45
  39:268,target 50
  46:272,target 30
  51:272 reduce
  23:269,target 15
  23:270,target 16
  51:273 reduce
  1:284,target 6
  12:291,target 26
  29:273,target 43
  51:274 reduce
  28:268,target 20
  59:270 reduce
  59:269 reduce
  1:263,target 5
  57:270,target 38
  57:269,target 38
  8:0 reduce
  10:282,target 19
  11:265,target 12
  17:268,target 18
  30:270 reduce
  60:276 shift
  12:290 goto
  16:264,target 21
  29:272 shift
  1:284 goto
  12:291 goto
  29:273 shift
  60:276,target 64
  1:285 goto
  29:274 shift
  48:297,target 58
  38:266 reduce
  1:286 goto
  59:282 reduce
  38:267 reduce
  1:287 goto
  38:268 reduce
  1:261,target 4
  12:267,target 23
  21:258,target 37
}

array set xmlrpc::rules {
  9,l 288
  11,l 289
  32,l 295
  6,l 285
  28,l 293
  3,l 284
  25,l 293
  0,l 298
  22,l 293
  18,l 292
  15,l 291
  36,l 296
  12,l 289
  33,l 295
  7,l 286
  29,l 294
  30,l 294
  4,l 284
  26,l 293
  1,l 283
  23,l 293
  19,l 292
  20,l 292
  16,l 291
  37,l 297
  13,l 290
  34,l 296
  8,l 287
  10,l 289
  31,l 295
  5,l 285
  27,l 293
  2,l 284
  24,l 293
  21,l 292
  17,l 291
  38,l 297
  14,l 290
  35,l 296
}

array set xmlrpc::rules {
  12,dc 1
  26,dc 5
  3,dc 1
  18,dc 1
  33,dc 1
  9,dc 3
  11,dc 2
  25,dc 1
  2,dc 1
  17,dc 1
  32,dc 2
  8,dc 3
  10,dc 3
  24,dc 2
  1,dc 2
  38,dc 1
  16,dc 2
  31,dc 4
  7,dc 3
  23,dc 3
  0,dc 1
  37,dc 2
  15,dc 3
  29,dc 2
  30,dc 1
  6,dc 3
  22,dc 1
  36,dc 1
  14,dc 1
  28,dc 1
  5,dc 4
  21,dc 1
  35,dc 2
  13,dc 2
  27,dc 2
  4,dc 1
  19,dc 3
  20,dc 2
  34,dc 3
}

array set xmlrpc::rules {
  7,line 59
  37,line 113
  4,line 52
  34,line 108
  1,line 47
  31,line 103
  27,line 95
  24,line 91
  21,line 85
  17,line 79
  14,line 74
  11,line 69
  9,line 65
  6,line 56
  36,line 110
  3,line 51
  33,line 105
  29,line 99
  30,line 100
  26,line 94
  23,line 90
  19,line 83
  20,line 84
  16,line 78
  13,line 73
  10,line 68
  8,line 62
  38,line 114
  5,line 55
  35,line 109
  2,line 50
  32,line 104
  28,line 96
  25,line 93
  22,line 89
  18,line 82
  15,line 77
  12,line 70
}

array set xmlrpc::lr1_table {
  66,trans {}
  35 {{22 270 1}}
  85,trans {{270 89}}
  36 {{19 264 2}}
  14,trans {{262 29}}
  33,trans {{278 54} {279 55}}
  37 {{8 0 3}}
  52,trans {{272 65} {273 50} {274 51} {295 66}}
  38 {{9 {258 265 266} 3}}
  71,trans {{269 67} {270 68} {280 81} {282 69} {292 82}}
  40 {{10 258 2} {13 {266 267 268} 1} {15 {266 267 268} 0} {16 {266 267 268} 0} {17 {266 267 268} 0}}
  39 {{11 258 2}}
  89,trans {}
  41 {{5 0 4}}
  18,trans {{264 37}}
  1,trans {{257 3} {261 4} {263 5} {284 6} {285 7} {286 8} {287 9}}
  37,trans {}
  42 {{16 {266 267 268} 2}}
  56,trans {}
  43 {{19 268 1} {20 268 1} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0} {28 270 0}}
  75,trans {{270 84} {271 31} {272 32} {277 33} {278 34} {282 35} {293 85}}
  44 {{21 268 1}}
  45 {{18 268 1}}
  23,trans {{258 41}}
  5,trans {{269 15} {270 16} {282 17} {292 18}}
  42,trans {}
  46 {{15 {266 267 268} 2}}
  61,trans {}
  47 {{10 262 3}}
  80,trans {{270 87}}
  79,trans {}
  48 {{13 {266 267 268} 2}}
  50 {{31 {272 273 274} 1} {32 {272 273 274} 1} {34 {269 270 282} 0} {35 {269 270 282} 0} {36 {269 270 282} 0}}
  49 {{24 270 2}}
  27,trans {{266 47} {267 25} {268 26} {291 48}}
  9,trans {}
  46,trans {{268 60}}
  51 {{33 {272 273 274} 1}}
  65,trans {}
  52 {{23 270 2} {29 {272 273 274} 1} {31 {272 273 274} 0} {32 {272 273 274} 0} {33 {272 273 274} 0}}
  84,trans {}
  53 {{30 {272 273 274} 1}}
  13,trans {}
  54 {{27 270 2}}
  32,trans {}
  51,trans {}
  55 {{26 270 2} {37 {269 270 280 282} 0} {38 {269 270 280 282} 0} {18 {269 270 280 282} 0} {19 {269 270 280 282} 0} {20 {269 270 280 282} 0} {21 {269 270 280 282} 0}}
  70,trans {}
  69,trans {}
  56 {{19 264 3}}
  88,trans {}
  57 {{10 258 3}}
  17,trans {}
  0,trans {{281 1} {283 2}}
  58 {{20 268 2}}
  36,trans {{270 56}}
  55,trans {{269 67} {270 68} {282 69} {292 70} {297 71}}
  60 {{15 {266 267 268} 3}}
  59 {{19 268 2}}
  74,trans {{276 83}}
  61 {{32 {272 273 274} 2}}
  62 {{34 {269 270 282} 1} {35 {269 270 282} 1}}
  22,trans {}
  4,trans {{265 12} {266 13} {289 14}}
  63 {{36 {269 270 282} 1}}
  41,trans {}
  60,trans {}
  59,trans {{270 72}}
  64 {{31 {272 273 274} 2} {18 274 0} {19 274 0} {20 274 0} {21 274 0}}
  78,trans {{274 86}}
  65 {{23 270 3}}
  66 {{29 {272 273 274} 2}}
  26,trans {}
  8,trans {}
  67 {{19 {269 270 280 282} 1} {20 {269 270 280 282} 1} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0} {28 270 0}}
  45,trans {}
  64,trans {{269 75} {270 76} {282 77} {292 78}}
  68 {{21 {269 270 280 282} 1}}
  83,trans {}
  70 {{38 {269 270 280 282} 1}}
  69 {{18 {269 270 280 282} 1}}
  12,trans {{266 24} {267 25} {268 26} {290 27} {291 28}}
  71 {{26 270 3} {37 {269 270 280 282} 1} {18 {269 270 280 282} 0} {19 {269 270 280 282} 0} {20 {269 270 280 282} 0} {21 {269 270 280 282} 0}}
  31,trans {{272 49} {273 50} {274 51} {294 52} {295 53}}
  72 {{19 268 3}}
  50,trans {{274 61} {275 62} {276 63} {296 64}}
  49,trans {}
  68,trans {}
  73 {{35 {269 270 282} 2}}
  87,trans {}
  74 {{34 {269 270 282} 2}}
  16,trans {}
  75 {{19 274 1} {20 274 1} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0} {28 270 0}}
  35,trans {}
  76 {{21 274 1}}
  54,trans {}
  73,trans {}
  77 {{18 274 1}}
  78 {{31 {272 273 274} 3}}
  21,trans {{266 39} {267 25} {268 26} {290 40} {291 28}}
  3,trans {{259 10} {288 11}}
  80 {{19 {269 270 280 282} 2}}
  79 {{20 {269 270 280 282} 2}}
  40,trans {{266 57} {267 25} {268 26} {291 48}}
  39,trans {}
  81 {{26 270 4}}
  58,trans {}
  10 {{9 {258 265 266} 1}}
  77,trans {}
  82 {{37 {269 270 280 282} 2}}
  11 {{5 0 2} {6 0 2} {10 258 0} {11 258 0} {12 258 0}}
  83 {{34 {269 270 282} 3}}
  25,trans {{268 42} {269 43} {270 44} {282 45} {292 46}}
  12 {{10 262 1} {11 262 1} {13 {266 267 268} 0} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0} {17 {266 267 268} 0}}
  7,trans {}
  84 {{20 274 2}}
  44,trans {}
  13 {{12 262 1}}
  85 {{19 274 2}}
  63,trans {}
  14 {{7 0 2}}
  82,trans {}
  86 {{31 {272 273 274} 4}}
  15 {{19 264 1} {20 264 1} {22 270 0} {23 270 0} {24 270 0} {25 270 0} {26 270 0} {27 270 0} {28 270 0}}
  11,trans {{258 20} {265 21} {266 22} {289 23}}
  87 {{19 {269 270 280 282} 3}}
  30,trans {}
  29,trans {}
  16 {{21 264 1}}
  88 {{26 270 5}}
  48,trans {}
  0 {{0 0 0} {1 0 0}}
  17 {{18 264 1}}
  89 {{19 274 3}}
  67,trans {{270 79} {271 31} {272 32} {277 33} {278 34} {282 35} {293 80}}
  1 {{1 0 1} {2 0 0} {3 0 0} {4 0 0} {5 0 0} {6 0 0} {7 0 0} {8 0 0}}
  18 {{8 0 2}}
  86,trans {}
  15,trans {{270 30} {271 31} {272 32} {277 33} {278 34} {282 35} {293 36}}
  2 {{0 0 1}}
  19 {{9 {258 265 266} 2}}
  20 {{6 0 3}}
  34,trans {}
  3 {{5 0 1} {6 0 1} {9 {258 265 266} 0}}
  21 {{10 258 1} {11 258 1} {13 {266 267 268} 0} {14 {266 267 268} 0} {15 {266 267 268} 0} {16 {266 267 268} 0} {17 {266 267 268} 0}}
  53,trans {}
  4 {{7 0 1} {10 262 0} {11 262 0} {12 262 0}}
  22 {{12 258 1}}
  72,trans {}
  5 {{8 0 1} {18 264 0} {19 264 0} {20 264 0} {21 264 0}}
  23 {{5 0 3}}
  20,trans {}
  19,trans {{260 38}}
  6 {{1 0 2}}
  2,trans {}
  24 {{11 262 2}}
  38,trans {}
  7 {{2 0 1}}
  25 {{15 {266 267 268} 1} {16 {266 267 268} 1} {18 268 0} {19 268 0} {20 268 0} {21 268 0}}
  57,trans {}
  8 {{3 0 1}}
  26 {{17 {266 267 268} 1}}
  76,trans {}
  9 {{4 0 1}}
  27 {{10 262 2} {13 {266 267 268} 1} {15 {266 267 268} 0} {16 {266 267 268} 0} {17 {266 267 268} 0}}
  24,trans {}
  6,trans {}
  28 {{14 {266 267 268} 1}}
  43,trans {{270 58} {271 31} {272 32} {277 33} {278 34} {282 35} {293 59}}
  29 {{7 0 3}}
  30 {{20 264 2}}
  62,trans {{276 73} {282 74}}
  31 {{23 270 1} {24 270 1} {29 {272 273 274} 0} {30 {272 273 274} 0} {31 {272 273 274} 0} {32 {272 273 274} 0} {33 {272 273 274} 0}}
  81,trans {{278 88}}
  10,trans {{282 19}}
  32 {{25 270 1}}
  28,trans {}
  33 {{26 270 1} {27 270 1}}
  47,trans {}
  34 {{28 270 1}}
}

array set xmlrpc::token_id_table {
  286,t 1
  286 methodResponse
  280,title _DATA
  279,title DATA
  264,line 17
  298,title {}
  292,line 81
  287 fault
  270,t 0
  269,t 0
  288 methodName
  290 xparam
  289 params
  276,line 34
  265,title PARAMS
  291,t 1
  291 param
  284,title {}
  292 value
  274,t 0
  261,line 13
  293 type
  288,line 64
  257,t 0
  294 members
  270,title _VALUE
  269,title VALUE
  295,t 1
  295 member
  288,title {}
  273,line 31
  296 name
  278,t 0
  297 values
  257,line 8
  262,t 0
  298 start'
  285,line 54
  274,title _MEMBER
  293,title {}
  283,t 1
  270,line 26
  269,line 25
  297,line 112
  259,title METHODNAME
  260,title _METHODNAME
  266,t 0
  278,title _ARRAY
  297,title {}
  282,line 42
  287,t 1
  error error
  271,t 0
  264,title _FAULT
  266,line 20
  294,line 98
  283,title {}
  292,t 1
  278,line 37
  error,line 45
  275,t 0
  268,title _PARAM
  287,title {}
  258,t 0
  263,line 16
  291,line 76
  error,title {}
  296,t 1
  280,t 0
  279,t 0
  275,line 33
  273,title MEMBER
  292,title {}
  263,t 0
  259,line 10
  260,line 11
  287,line 61
  258,title _METHODCALL
  284,t 1
  277,title ARRAY
  296,title {}
  272,line 29
  267,t 0
  263,title FAULT
  288,t 1
  284,line 49
  282,title string
  272,t 0
  268,line 23
  296,line 107
  267,title PARAM
  293,t 1
  286,title {}
  257 METHODCALL_
  281,line 41
  276,t 0
  258 _METHODCALL_
  259,t 0
  259 METHODNAME_
  260 _METHODNAME_
  260,t 0
  272,title _STRUCT
  261 METHODRESPONSE_
  265,line 19
  297,t 1
  293,line 87
  291,title {}
  262 _METHODRESPONSE_
  281,t 0
  263 FAULT_
  277,line 36
  257,title METHODCALL
  264 _FAULT_
  264,t 0
  276,title _NAME
  265 PARAMS_
  295,title {}
  262,line 14
  266 _PARAMS_
  290,line 72
  289,line 67
  285,t 1
  267 PARAM_
  0,t 0
  0 {$}
  262,title _METHODRESPONSE
  268 _PARAM_
  268,t 0
  281,title string
  274,line 32
  270 _VALUE_
  269 VALUE_
  error,t 0
  271 STRUCT_
  290,t 1
  289,t 1
  272 _STRUCT_
  258,line 9
  286,line 58
  273,t 0
  273 MEMBER_
  266,title _PARAMS
  285,title {}
  274 _MEMBER_
  275 NAME_
  271,line 28
  298,line 115
  294,t 1
  276 _NAME_
  277,t 0
  277 ARRAY_
  271,title STRUCT
  290,title {}
  289,title {}
  283,line 46
  278 _ARRAY_
  261,t 0
  280 _DATA_
  279 DATA_
  298,t 1
  281 HEADER_
  267,line 22
  295,line 102
  282,t 0
  282 STRING_
  275,title NAME
  294,title {}
  283 command
  265,t 0
  284 which
  280,line 39
  279,line 38
  285 methodCall
  261,title METHODRESPONSE
}

proc xmlrpc::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { global parse; set parse(result) $2 }
                    2 { set _ $1 }
                    3 { set _ $1 }
                    4 { set _ $1 }
                    5 { set _ [list methodcall [list $2 $3]] }
                    6 { set _ [list methodcall [list $2]] }
                    7 { set _ [list methodresponse $2] }
                    8 { set _ [list fault $2] }
                    9 { set _ [list methodname $2] }
                    10 { set _ [list params $2] }
                    11 { set _ [list params {}] }
                    12 { set _ [list params {}] }
                    13 { lappend _ $2 }
                    14 { set _ [list $1] }
                    15 { set _ [list param $2] }
                    16 { set _ [list param {}] }
                    17 { set _ [list param {}] }
                    18 { set _ [list value [list string $1]] }
                    19 { set _ [list value $2] }
                    20 { set _ [list value {}] }
                    21 { set _ [list value {}] }
                    22 { set _ [list string "$1"] }
                    23 { set _ [list struct $2] }
                    24 { set _ [list struct {}] }
                    25 { set _ [list struct {}] }
                    26 { set _ [list array [list data $3]] }
                    27 { set _ [list array {}] }
                    28 { set _ [list array {}] }
                    29 { lappend _ $2 }
                    30 { set _ [list $1] }
                    31 { set _ [list member [list $2 $3]] }
                    32 { set _ [list member {}] }
                    33 { set _ [list member {}] }
                    34 { set _ [list name $2] }
                    35 { set _ [list name {}] }
                    36 { set _ [list name {}] }
                    37 { lappend _ $2 }
                    38 { set _ [list $1] }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

proc xmlrpc::yyerror {msg} {
     variable yycnt
     variable yy_current_buffer
     variable index_

     ParserError $msg $yycnt $yy_current_buffer $index_
}
