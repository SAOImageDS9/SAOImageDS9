itclBase.c:    hPtr = Tcl_FindHashEntry(&ioPtr->iclsPtr->variables, (char *)objPtr);
itclBuiltin.c:    iclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:        FOREACH_HASH_VALUE(icPtr, &ioPtr->objectComponents) {
itclBuiltin.c:    iclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:                    Tcl_GetString(ioPtr->varNsNamePtr), -1);
itclBuiltin.c:	            infoPtr->currContextIclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:	        infoPtr->currContextIclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:	                infoPtr->currContextIclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:	            infoPtr->currContextIclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:	        infoPtr->currContextIclsPtr = ioPtr->iclsPtr;
itclBuiltin.c:    Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclBuiltin.c:    Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclBuiltin.c:    FOREACH_HASH_VALUE(idoptPtr, &ioPtr->objectDelegatedOptions) {
itclBuiltin.c:    FOREACH_HASH_VALUE(ioptPtr, &ioPtr->objectOptions) {
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectComponents, (char *)objv[1]);
itclBuiltin.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectDelegatedOptions,
itclBuiltin.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectComponents, (char *)objv[1]);
itclBuiltin.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectDelegatedOptions,
itclClass.c:        if (ioPtr->iclsPtr == iclsPtr) {
itclClass.c:	    if ((ioPtr->accessCmd != NULL) && (!(ioPtr->flags &
itclClass.c:                Tcl_DeleteCommandFromToken(iclsPtr->interp, ioPtr->accessCmd);
itclClass.c:	        ioPtr->accessCmd = NULL;
itclCmd.c:    Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclCmd.c:            Tcl_GetString(ioPtr->namePtr), -1);
itclCmd.c:    hPtr = Tcl_CreateHashEntry(&ioPtr->objectOptions,
itclCmd.c:    hPtr = Tcl_CreateHashEntry(&ioPtr->objectDelegatedOptions,
itclCmd.c:    Itcl_InitHierIter(&hier, ioPtr->iclsPtr);
itclCmd.c:    DelegateFunction(interp, ioPtr, ioPtr->iclsPtr, componentNamePtr, idmPtr);
itclCmd.c:    hPtr = Tcl_CreateHashEntry(&ioPtr->objectDelegatedFunctions,
itclHelpers.c:        hPtr = Tcl_FindHashEntry(&tracePtr->ioPtr->objectVariables,
itclHelpers.c:    keyPtr = ioPtr->namePtr;
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-name", ioPtr->namePtr) != TCL_OK) {
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-origname", ioPtr->namePtr)
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-class", ioPtr->iclsPtr->fullNamePtr)
itclHelpers.c:    if (ioPtr->hullWindowNamePtr != NULL) {
itclHelpers.c:	        ioPtr->hullWindowNamePtr) != TCL_OK) {
itclHelpers.c:    if (AddDictEntry(interp, valuePtr2, "-varns", ioPtr->varNsNamePtr)
itclHelpers.c:    Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclHelpers.c:    keyPtr = ioPtr->namePtr;
itclHelpers.c:    keyPtr = ioPtr->namePtr;
itclInfo.c:	            NULL, ioPtr, ioPtr->iclsPtr);
itclInfo.c:    objPtr = Tcl_NewStringObj(Tcl_GetString(ioPtr->namePtr), -1);
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        tablePtr = &ioPtr->objectOptions;
itclInfo.c:        tablePtr = &ioPtr->objectDelegatedOptions;
itclInfo.c:	            NULL, ioPtr, ioPtr->iclsPtr);
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        if (ioPtr->iclsPtr == iclsPtr) {
itclInfo.c:	    if (ioPtr->iclsPtr->flags & ITCL_WIDGETADAPTOR) {
itclInfo.c:		        ioPtr->accessCmd), -1);
itclInfo.c:	        Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclInfo.c:        iclsPtr = ioPtr->iclsPtr;
itclMethod.c:        ioPtr->hadConstructorError = 0;
itclMethod.c:        oPtr = ioPtr->oPtr;
itclMethod.c:	if (ioPtr != NULL && ioPtr->hadConstructorError == 0) {
itclMethod.c:            ioPtr->hadConstructorError = 1;
itclMethod.c:            entry = Tcl_FindHashEntry(&ioPtr->iclsPtr->resolveCmds,
itclMethod.c:        iclsPtr = ioPtr->iclsPtr;
itclMethod.c:        iclsPtr = ioPtr->iclsPtr;
itclMethod.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectVariables,
itclMethod.c:                hPtr = Tcl_FindHashEntry(&ioPtr->objectVariables,
itclMethod.c:        hPtr = Tcl_CreateHashEntry(&ioPtr->contextCache, (char *)imPtr, &isNew);
itclMethod.c:                callContextPtr->objectFlags = ioPtr->flags;
itclMethod.c:	      if ((callContextPtr2->objectFlags == ioPtr->flags) 
itclMethod.c:            callContextPtr->objectFlags = ioPtr->flags;
itclMethod.c:        ioPtr->callRefCount++;
itclMethod.c:        Itcl_SetCallFrameResolver(interp, ioPtr->resolvePtr);
itclMethod.c:                 ioPtr->destructed) {
itclMethod.c:                Tcl_CreateHashEntry(ioPtr->destructed,
itclMethod.c:                 ioPtr->constructed) {
itclMethod.c:                Tcl_CreateHashEntry(ioPtr->constructed,
itclMethod.c:        ioPtr->callRefCount--;
itclMethod.c:        if (ioPtr->flags & ITCL_OBJECT_SHOULD_VARNS_DELETE) {
itclMethod.c:	    hPtr = Tcl_FindHashEntry(&callContextPtr->ioPtr->contextCache,
itclObject.c:    if (ioPtr->flags & ITCL_OBJECT_CLASS_DESTRUCTED) {
itclObject.c:    ioPtr->flags |= ITCL_OBJECT_IS_RENAMED;
itclObject.c:    if (ioPtr->flags & ITCL_TCLOO_OBJECT_IS_DELETED) {
itclObject.c:        ioPtr->oPtr = NULL;
itclObject.c:    if (!(ioPtr->flags & ITCL_OBJECT_CLASS_DESTRUCTED)) {
itclObject.c:        istate = Itcl_SaveInterpState(ioPtr->interp, 0);
itclObject.c:        Itcl_DestructObject(ioPtr->interp, ioPtr, ITCL_IGNORE_ERRS);
itclObject.c:        Itcl_RestoreInterpState(ioPtr->interp, istate);
itclObject.c:        ioPtr->flags |= ITCL_OBJECT_CLASS_DESTRUCTED;
itclObject.c:    ioPtr->iclsPtr = iclsPtr;
itclObject.c:    ioPtr->interp = interp;
itclObject.c:    ioPtr->infoPtr = infoPtr;
itclObject.c:    ioPtr->constructed = (Tcl_HashTable*)ckalloc(sizeof(Tcl_HashTable));
itclObject.c:    Tcl_InitObjHashTable(ioPtr->constructed);
itclObject.c:    ioPtr->namePtr = Tcl_NewStringObj(name, -1);
itclObject.c:    Tcl_IncrRefCount(ioPtr->namePtr);
itclObject.c:    ioPtr->origNamePtr = Tcl_NewStringObj("", -1);
itclObject.c:        Tcl_AppendToObj(ioPtr->origNamePtr, nsName, -1);
itclObject.c:            Tcl_AppendToObj(ioPtr->origNamePtr, "::", -1);
itclObject.c:    Tcl_AppendToObj(ioPtr->origNamePtr, name, -1);
itclObject.c:    Tcl_IncrRefCount(ioPtr->origNamePtr);
itclObject.c:    Tcl_DStringAppend(&buffer, Tcl_GetString(ioPtr->namePtr), -1);
itclObject.c:    ioPtr->varNsNamePtr = Tcl_NewStringObj(Tcl_DStringValue(&buffer), -1);
itclObject.c:    Tcl_IncrRefCount(ioPtr->varNsNamePtr);
itclObject.c:    Tcl_InitHashTable(&ioPtr->objectVariables, TCL_ONE_WORD_KEYS);
itclObject.c:    Tcl_InitObjHashTable(&ioPtr->objectOptions);
itclObject.c:    Tcl_InitObjHashTable(&ioPtr->objectComponents);
itclObject.c:    Tcl_InitObjHashTable(&ioPtr->objectDelegatedOptions);
itclObject.c:    Tcl_InitObjHashTable(&ioPtr->objectDelegatedFunctions);
itclObject.c:    Tcl_InitObjHashTable(&ioPtr->objectMethodVariables);
itclObject.c:    Tcl_InitHashTable(&ioPtr->contextCache, TCL_ONE_WORD_KEYS);
itclObject.c:	ioPtr->hadConstructorError = 11;    
itclObject.c:	ioPtr->hadConstructorError = 12;    
itclObject.c:	        ioPtr->hadConstructorError = 13;    
itclObject.c:	    ioPtr->hadConstructorError = 14;    
itclObject.c:        newObjv[1] = ioPtr->namePtr;
itclObject.c:        newObjv[2] = ioPtr->iclsPtr->namePtr;
itclObject.c:        if (ioPtr->iclsPtr->widgetClassPtr != NULL) {
itclObject.c:            newObjv[3] = ioPtr->iclsPtr->widgetClassPtr;
itclObject.c:        if (ioPtr->iclsPtr->hullTypePtr != NULL) {
itclObject.c:            newObjv[4] = ioPtr->iclsPtr->hullTypePtr;
itclObject.c:	    ioPtr->hadConstructorError = 15;    
itclObject.c:	    ioPtr->hadConstructorError = 16;    
itclObject.c:	ioPtr->createNamePtr = Tcl_NewStringObj(objName, -1);
itclObject.c:    ioPtr->oPtr = Tcl_NewObjectInstance(interp, iclsPtr->clsPtr, objName,
itclObject.c:    if (ioPtr->oPtr == NULL) {
itclObject.c:	ioPtr->hadConstructorError = 16;    
itclObject.c:    Tcl_ObjectSetMethodNameMapper(ioPtr->oPtr, ItclMapMethodNameProc);
itclObject.c:    ioPtr->accessCmd = Tcl_GetObjectCommand(ioPtr->oPtr);
itclObject.c:    Tcl_GetCommandInfoFromToken(ioPtr->accessCmd, &cmdInfo);
itclObject.c:    Tcl_SetCommandInfoFromToken(ioPtr->accessCmd, &cmdInfo);
itclObject.c:    ioPtr->resolvePtr = (Tcl_Resolve *)ckalloc(sizeof(Tcl_Resolve));
itclObject.c:    ioPtr->resolvePtr->cmdProcPtr = Itcl_CmdAliasProc;
itclObject.c:    ioPtr->resolvePtr->varProcPtr = Itcl_VarAliasProc;
itclObject.c:    ioPtr->resolvePtr->clientData = resolveInfoPtr;
itclObject.c:    Tcl_TraceCommand(interp, Tcl_GetString(ioPtr->namePtr),
itclObject.c:    Tcl_ObjectSetMetadata(ioPtr->oPtr, iclsPtr->infoPtr->object_meta_type,
itclObject.c:        (char*)ioPtr->accessCmd, &newEntry);
itclObject.c:            (char*)ioPtr->namePtr, &newEntry);
itclObject.c:    ioPtr->hadConstructorError = 0;
itclObject.c:    if (ioPtr->hadConstructorError) {
itclObject.c:    ioPtr->hadConstructorError = -1;
itclObject.c:	if (ioPtr->accessCmd != (Tcl_Command) NULL) {
itclObject.c:	    Tcl_DeleteCommandFromToken(interp, ioPtr->accessCmd);
itclObject.c:	    ioPtr->accessCmd = NULL;
itclObject.c:	if (ioPtr->accessCmd != (Tcl_Command) NULL) {
itclObject.c:	    Tcl_DeleteCommandFromToken(interp, ioPtr->accessCmd);
itclObject.c:	    ioPtr->accessCmd = NULL;
itclObject.c:        ioPtr->createNamePtr = NULL;
itclObject.c:        Tcl_TraceCommand(interp, Tcl_GetString(ioPtr->namePtr),
itclObject.c:	Tcl_AppendToObj(objPtr, Tcl_GetString(ioPtr->varNsNamePtr), -1);
itclObject.c:	Tcl_AppendToObj(objPtr, Tcl_GetString(ioPtr->namePtr), -1);
itclObject.c:	result = ItclCheckForInitializedComponents(interp, ioPtr->iclsPtr,
itclObject.c:	    if (ioPtr->accessCmd != (Tcl_Command) NULL) {
itclObject.c:	        Tcl_DeleteCommandFromToken(interp, ioPtr->accessCmd);
itclObject.c:	        ioPtr->accessCmd = NULL;
itclObject.c:    if (result == TCL_OK && (ioPtr->accessCmd != NULL))  {
itclObject.c:	if (!(ioPtr->iclsPtr->flags & ITCL_CLASS)) {
itclObject.c:                (char*)ioPtr->accessCmd, &newEntry);
itclObject.c:	Tcl_AppendToObj(bodyPtr, Tcl_GetString(ioPtr->namePtr), -1);
itclObject.c:        Itcl_NewProcMethod(interp, ioPtr->oPtr, NULL, NULL, ItclProcErrorProc, 
itclObject.c:            Tcl_GetCommandFullName(interp, ioPtr->accessCmd, objPtr);
itclObject.c:        if (ioPtr->accessCmd != NULL) {
itclObject.c:                (char*)ioPtr->accessCmd);
itclObject.c:    Tcl_DeleteHashTable(ioPtr->constructed);
itclObject.c:    ckfree((char*)ioPtr->constructed);
itclObject.c:    ioPtr->constructed = NULL;
itclObject.c:    if (ioPtr->constructed != NULL) {
itclObject.c:        Tcl_DeleteHashTable(ioPtr->constructed);
itclObject.c:        ckfree((char*)ioPtr->constructed);
itclObject.c:        ioPtr->constructed = NULL;
itclObject.c:			        Tcl_GetString(ioPtr->namePtr),
itclObject.c:                hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectComponents,
itclObject.c:	        hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectVariables,
itclObject.c:	            hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectVariables,
itclObject.c:    varNsPtr = Tcl_FindNamespace(interp, Tcl_GetString(ioPtr->varNsNamePtr),
itclObject.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectOptions,
itclObject.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectDelegatedOptions,
itclObject.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectComponents,
itclObject.c:	    hPtr2 = Tcl_CreateHashEntry(&ioPtr->objectMethodVariables,
itclObject.c:    if (ioPtr->callRefCount < 1) {
itclObject.c:	ioPtr->flags &= ~ITCL_OBJECT_SHOULD_VARNS_DELETE;
itclObject.c:        varNsPtr = Tcl_FindNamespace(interp, Tcl_GetString(ioPtr->varNsNamePtr),
itclObject.c:        ioPtr->flags |= ITCL_OBJECT_SHOULD_VARNS_DELETE;
itclObject.c:	hPtr = Tcl_FindHashEntry(&ioPtr->objectComponents, (char *)objPtr);
itclObject.c:	    if (ioPtr->noComponentTrace) {
itclObject.c:                    ioPtr->iclsPtr);
itclObject.c:            FOREACH_HASH_VALUE(idmPtr, &ioPtr->iclsPtr->delegatedFunctions) {
itclObject.c:                        DelegateFunction(interp, ioPtr, ioPtr->iclsPtr,
itclObject.c:	hPtr = Tcl_FindHashEntry(&ioPtr->iclsPtr->variables, (char *)objPtr);
itclObject.c:    ItclReleaseClass(ioPtr->iclsPtr);
itclObject.c:    if (ioPtr->constructed) {
itclObject.c:        Tcl_DeleteHashTable(ioPtr->constructed);
itclObject.c:        ckfree((char*)ioPtr->constructed);
itclObject.c:    if (ioPtr->destructed) {
itclObject.c:        Tcl_DeleteHashTable(ioPtr->destructed);
itclObject.c:        ckfree((char*)ioPtr->destructed);
itclObject.c:    ItclDeleteObjectsDictInfo(ioPtr->interp, ioPtr);
itclObject.c:        hPtr = Tcl_FirstHashEntry(&ioPtr->contextCache, &place);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->contextCache);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectVariables);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectOptions);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectComponents);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectMethodVariables);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectDelegatedOptions);
itclObject.c:    Tcl_DeleteHashTable(&ioPtr->objectDelegatedFunctions);
itclObject.c:    hPtr = Tcl_FindHashEntry(&ioPtr->infoPtr->objectNames,
itclObject.c:            (char *)ioPtr->namePtr);
itclObject.c:    Tcl_DecrRefCount(ioPtr->namePtr);
itclObject.c:    Tcl_DecrRefCount(ioPtr->origNamePtr);
itclObject.c:    if (ioPtr->createNamePtr != NULL) {
itclObject.c:        Tcl_DecrRefCount(ioPtr->createNamePtr);
itclObject.c:    if (ioPtr->hullWindowNamePtr != NULL) {
itclObject.c:        Tcl_DecrRefCount(ioPtr->hullWindowNamePtr);
itclObject.c:    Tcl_DecrRefCount(ioPtr->varNsNamePtr);
itclObject.c:    if (ioPtr->resolvePtr != NULL) {
itclObject.c:	ckfree((char *)ioPtr->resolvePtr->clientData);
itclObject.c:        ckfree((char*)ioPtr->resolvePtr);
itclObject.c:        hPtr = Tcl_FindHashEntry(&infoPtr->classes, (char *)ioPtr->iclsPtr);
itclObject.c:	    sprintf(str, "%p", ioPtr->iclsPtr);
itclObject.c:        iclsPtr = ioPtr->iclsPtr;
itclObject.c:			            Tcl_GetString(ioPtr->namePtr), -1);
itclObject.c:    ioPtr->noComponentTrace = 1;
itclObject.c:                        Tcl_GetString(ioPtr->varNsNamePtr), -1);
itclObject.c:                ioPtr->noComponentTrace = 0;
itclObject.c:    ioPtr->noComponentTrace = 0;
itclObject.c:    iclsPtr = ioPtr->iclsPtr;
itclParse.c:		            Tcl_GetString(ioPtr->varNsNamePtr), -1);
itclParse.c:			    ioPtr->iclsPtr->interp,
itclParse.c:	    objectStr = Tcl_GetString(ioPtr->origNamePtr);
itclParse.c:        Tcl_DeleteCommandFromToken(infoPtr->interp, ioPtr->accessCmd);
itclParse.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectDelegatedOptions,
itclParse.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectDelegatedFunctions, (char *)
itclParse.c:            Itcl_InitHierIter(&hier, ioPtr->iclsPtr);
itclParse.c:        hPtr = Tcl_FindHashEntry(&ioPtr->objectDelegatedOptions, (char *)
itclParse.c:        Itcl_InitHierIter(&hier, ioPtr->iclsPtr);
itclParse.c:	    hPtr = Tcl_FindHashEntry(&ioPtr->objectOptions,
