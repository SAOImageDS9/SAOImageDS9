package provide DS9 1.0
	set globalColor cyan
	set globalFill 0
	set globalDash 0
	set globalWidth 1
	set globalFont "helvetica 12 normal roman"
	set globalText {}

######
# Begin autogenerated taccle (version 1.3) routines.
# Although taccle itself is protected by the GNU Public License (GPL)
# all user-supplied functions are protected by their respective
# author's license.  See http://mini.net/tcl/taccle for other details.
######

namespace eval illustratereg {
    variable yylval {}
    variable table
    variable rules
    variable token {}
    variable yycnt 0
    variable yyerr 0
    variable save_state 0

    namespace export yylex
}

proc illustratereg::YYABORT {} {
    return -code return 1
}

proc illustratereg::YYACCEPT {} {
    return -code return 0
}

proc illustratereg::YYERROR {} {
    variable yyerr
    set yyerr 1
}

proc illustratereg::yyclearin {} {
    variable token
    variable yycnt
    set token {}
    incr yycnt -1
}

proc illustratereg::yyerror {s} {
    puts stderr $s
}

proc illustratereg::setupvalues {stack pointer numsyms} {
    upvar 1 1 y
    set y {}
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        set y [lindex $stack $pointer]
        incr pointer
    }
}

proc illustratereg::unsetupvalues {numsyms} {
    for {set i 1} {$i <= $numsyms} {incr i} {
        upvar 1 $i y
        unset y
    }
}

array set illustratereg::table {
  1:271,target 1
  3:289 goto
  9:272,target 4
  5:0,target 2
  9:0 reduce
  11:0 reduce
  4:272,target 11
  11:271 reduce
  11:272 reduce
  9:271,target 4
  11:272,target 12
  6:0,target 5
  4:271,target 11
  0:271 shift
  2:0 reduce
  0:272 shift
  2:271 reduce
  7:272,target 3
  2:272 reduce
  6:0 reduce
  4:271 reduce
  11:271,target 12
  4:272 reduce
  6:271 reduce
  2:272,target 13
  6:272 reduce
  8:271 reduce
  7:0,target 3
  12:0 reduce
  8:272 reduce
  10:0,target 7
  7:271,target 3
  2:271,target 13
  0:288 goto
  1:266,target 10
  8:0,target 6
  5:272,target 2
  0:289 goto
  3:0 accept
  1:286,target 11
  1:0,target 1
  11:0,target 12
  0:272,target 2
  7:0 reduce
  12:272,target 10
  1:265,target 9
  5:271,target 2
  1:261 shift
  10:271 reduce
  1:262 shift
  10:272 reduce
  9:0,target 4
  1:263 shift
  12:271 reduce
  0:271,target 1
  1:264 shift
  2:0,target 13
  12:272 reduce
  12:0,target 10
  8:272,target 6
  1:265 shift
  1:266 shift
  12:271,target 10
  1:264,target 8
  3:272,target 2
  1:271 reduce
  1:272 reduce
  4:0 reduce
  8:271,target 6
  3:271 shift
  0:289,target 4
  3:0,target 0
  3:272 shift
  10:272,target 7
  5:271 reduce
  1:263,target 7
  8:0 reduce
  5:272 reduce
  3:271,target 1
  10:0 reduce
  7:271 reduce
  7:272 reduce
  9:271 reduce
  9:272 reduce
  6:272,target 5
  0:288,target 3
  10:271,target 7
  1:262,target 6
  1:272,target 1
  4:0,target 11
  1:0 reduce
  1:286 goto
  3:289,target 12
  6:271,target 5
  5:0 reduce
  1:261,target 5
}

array set illustratereg::rules {
  9,l 287
  11,l 288
  32,l 294
  6,l 286
  28,l 294
  50,l 301
  49,l 301
  3,l 286
  25,l 292
  46,l 301
  0,l 302
  22,l 292
  43,l 298
  18,l 291
  40,l 296
  39,l 296
  15,l 290
  36,l 296
  12,l 289
  33,l 294
  7,l 286
  29,l 294
  30,l 294
  4,l 286
  26,l 293
  47,l 301
  1,l 286
  23,l 292
  44,l 299
  19,l 291
  20,l 292
  41,l 296
  16,l 290
  37,l 296
  13,l 289
  34,l 295
  8,l 287
  10,l 288
  31,l 294
  5,l 286
  27,l 293
  48,l 301
  2,l 286
  24,l 292
  45,l 300
  21,l 292
  42,l 298
  17,l 290
  38,l 297
  14,l 290
  35,l 296
}

array set illustratereg::rules {
  12,dc 2
  26,dc 2
  3,dc 1
  41,dc 4
  18,dc 2
  33,dc 2
  9,dc 1
  47,dc 1
  11,dc 1
  25,dc 2
  2,dc 1
  40,dc 6
  39,dc 4
  17,dc 2
  32,dc 2
  8,dc 1
  46,dc 1
  10,dc 2
  24,dc 2
  1,dc 0
  38,dc 0
  16,dc 1
  31,dc 2
  7,dc 1
  45,dc 2
  23,dc 2
  0,dc 1
  37,dc 6
  15,dc 2
  29,dc 2
  30,dc 2
  6,dc 1
  44,dc 2
  22,dc 2
  36,dc 6
  14,dc 2
  28,dc 2
  5,dc 1
  43,dc 1
  21,dc 2
  35,dc 5
  50,dc 1
  49,dc 1
  13,dc 1
  27,dc 1
  4,dc 1
  42,dc 2
  19,dc 1
  20,dc 2
  34,dc 0
  48,dc 1
}

array set illustratereg::rules {
  41,line 126
  7,line 74
  37,line 123
  4,line 71
  34,line 118
  1,line 68
  31,line 113
  27,line 107
  24,line 102
  21,line 99
  17,line 91
  14,line 88
  11,line 81
  50,line 143
  49,line 142
  46,line 139
  43,line 130
  9,line 77
  40,line 125
  39,line 124
  6,line 73
  36,line 122
  3,line 70
  33,line 115
  29,line 111
  30,line 112
  26,line 106
  23,line 101
  19,line 95
  20,line 98
  16,line 90
  13,line 85
  10,line 80
  48,line 141
  45,line 136
  42,line 129
  8,line 76
  38,line 123
  5,line 72
  35,line 121
  2,line 69
  32,line 114
  28,line 110
  25,line 103
  22,line 100
  18,line 94
  15,line 89
  12,line 84
  38,e 1
  47,line 140
  44,line 133
}

array set illustratereg::lr1_table {
  0 {{0 0 0} {10 {0 271 272} 0} {11 {0 271 272} 0} {12 {0 271 272} 0} {13 {0 271 272} 0}}
  1 {{12 {0 271 272} 1} {1 {0 271 272} 0} {2 {0 271 272} 0} {3 {0 271 272} 0} {4 {0 271 272} 0} {5 {0 271 272} 0} {6 {0 271 272} 0} {7 {0 271 272} 0}}
  2 {{13 {0 271 272} 1}}
  3 {{0 0 1} {10 {0 271 272} 1} {12 {0 271 272} 0} {13 {0 271 272} 0}}
  4 {{11 {0 271 272} 1}}
  0,trans {{271 1} {272 2} {288 3} {289 4}}
  1,trans {{261 5} {262 6} {263 7} {264 8} {265 9} {266 10} {286 11}}
  5 {{2 {0 271 272} 1}}
  2,trans {}
  6 {{5 {0 271 272} 1}}
  3,trans {{271 1} {272 2} {289 12}}
  7 {{3 {0 271 272} 1}}
  4,trans {}
  8 {{6 {0 271 272} 1}}
  5,trans {}
  9 {{4 {0 271 272} 1}}
  10 {{7 {0 271 272} 1}}
  6,trans {}
  11 {{12 {0 271 272} 2}}
  7,trans {}
  12 {{10 {0 271 272} 2}}
  8,trans {}
  10,trans {}
  9,trans {}
  11,trans {}
  12,trans {}
}

array set illustratereg::token_id_table {
  286,t 1
  286 yesno
  280,title ELLIPSE
  279,title CIRCLE
  264,line 23
  302,line 144
  298,title {}
  292,line 97
  287 numeric
  270,t 0
  269,t 0
  288 commands
  300 comment
  290 commandd
  289 command
  276,line 41
  265,title TRUE
  301,t 1
  301 coordSystem
  291,t 1
  291 global
  284,title TEXT
  302 start'
  292 globalProperty
  274,t 0
  261,line 20
  293 local
  288,line 79
  257,t 0
  294 localProperty
  270,title HASH
  269,title string
  295,t 1
  295 initLocal
  288,title {}
  273,line 37
  296 shape
  278,t 0
  297 @PSEUDO1
  257,line 14
  262,t 0
  298 coords
  285,line 52
  274,title COLOR
  299,t 1
  299 coord
  293,title {}
  283,t 0
  270,line 34
  269,line 30
  297,line 123
  259,title AMPLIFIER
  260,title DETECTOR
  266,t 0
  278,title FONT
  297,title {}
  282,line 48
  287,t 1
  error error
  271,t 0
  264,title OFF
  266,line 25
  294,line 109
  283,title LINE
  302,t 1
  292,t 1
  278,line 43
  error,line 66
  275,t 0
  268,title float
  287,title {}
  258,t 0
  263,line 22
  301,line 138
  291,line 93
  error,title {}
  296,t 1
  280,t 0
  279,t 0
  275,line 40
  273,title GLOBAL
  302,title {}
  292,title {}
  263,t 0
  259,line 16
  260,line 17
  287,line 75
  258,title PHYSICAL
  284,t 0
  277,title DASH
  296,title {}
  272,line 36
  267,t 0
  299,line 132
  263,title ON
  288,t 1
  284,line 50
  282,title POLYGON
  272,t 0
  268,line 28
  296,line 120
  267,title integer
  293,t 1
  286,title {}
  257 IMAGE_
  281,line 47
  276,t 0
  258 PHYSICAL_
  259,t 0
  259 AMPLIFIER_
  260 DETECTOR_
  260,t 0
  272,title VERSION
  261 YES_
  265,line 24
  301,title {}
  297,t 1
  293,line 105
  291,title {}
  262 NO_
  281,t 0
  263 ON_
  277,line 42
  257,title IMAGE
  264 OFF_
  264,t 0
  276,title FILL
  265 TRUE_
  295,title {}
  262,line 21
  266 FALSE_
  300,line 135
  290,line 87
  289,line 83
  285,t 0
  267 INT_
  0,t 0
  0 {$}
  262,title NO
  268 REAL_
  268,t 0
  281,title BOX
  274,line 39
  270 HASH_
  269 STRING_
  299,title {}
  error,t 0
  271 DEBUG_
  300,t 1
  290,t 1
  289,t 1
  272 VERSION_
  258,line 15
  286,line 67
  273,t 0
  273 GLOBAL_
  266,title FALSE
  285,title WCS
  274 COLOR_
  275 WIDTH_
  271,line 35
  298,line 128
  294,t 1
  276 FILL_
  277,t 0
  277 DASH_
  271,title DEBUG
  300,title {}
  290,title {}
  289,title {}
  283,line 49
  278 FONT_
  261,t 0
  280 ELLIPSE_
  279 CIRCLE_
  298,t 1
  281 BOX_
  267,line 27
  295,line 117
  282,t 0
  282 POLYGON_
  275,title WIDTH
  294,title {}
  283 LINE_
  265,t 0
  284 TEXT_
  280,line 46
  279,line 45
  285 WCS_
  261,title YES
}

proc illustratereg::yyparse {} {
    variable yylval
    variable table
    variable rules
    variable token
    variable yycnt
    variable lr1_table
    variable token_id_table
    variable yyerr
    variable save_state

    set yycnt 0
    set state_stack {0}
    set value_stack {{}}
    set token ""
    set accepted 0
    set yyerr 0
    set save_state 0

    while {$accepted == 0} {
        set state [lindex $state_stack end]
        if {$token == ""} {
            set yylval ""
            set token [yylex]
            set buflval $yylval
	    if {$token>0} {
	        incr yycnt
            }
        }
        if {![info exists table($state:$token)] || $yyerr} {
	    if {!$yyerr} {
	        set save_state $state
	    }
            # pop off states until error token accepted
            while {[llength $state_stack] > 0 && \
                       ![info exists table($state:error)]} {
                set state_stack [lrange $state_stack 0 end-1]
                set value_stack [lrange $value_stack 0 \
                                       [expr {[llength $state_stack] - 1}]]
                set state [lindex $state_stack end]
            }
            if {[llength $state_stack] == 0} {
 
	        set rr { }
                if {[info exists lr1_table($save_state,trans)] && [llength $lr1_table($save_state,trans)] >= 1} {
                    foreach trans $lr1_table($save_state,trans) {
                        foreach {tok_id nextstate} $trans {
			    set ss $token_id_table($tok_id,title)
			    if {$ss != {}} {
			        append rr "$ss, "
                            }
                        }
                    }
                }
		set rr [string trimleft $rr { }]
		set rr [string trimright $rr {, }]
                yyerror "parse error, expecting: $rr"


                return 1
            }
            lappend state_stack [set state $table($state:error,target)]
            lappend value_stack {}
            # consume tokens until it finds an acceptable one
            while {![info exists table($state:$token)]} {
                if {$token == 0} {
                    yyerror "end of file while recovering from error"
                    return 1
                }
                set yylval {}
                set token [yylex]
                set buflval $yylval
            }
            continue
        }
        switch -- $table($state:$token) {
            shift {
                lappend state_stack $table($state:$token,target)
                lappend value_stack $buflval
                set token ""
            }
            reduce {
                set rule $table($state:$token,target)
                set ll $rules($rule,l)
                if {[info exists rules($rule,e)]} {
                    set dc $rules($rule,e)
                } else {
                    set dc $rules($rule,dc)
                }
                set stackpointer [expr {[llength $state_stack]-$dc}]
                setupvalues $value_stack $stackpointer $dc
                set _ $1
                set yylval [lindex $value_stack end]
                switch -- $rule {
                    1 { set _ 1 }
                    2 { set _ 1 }
                    3 { set _ 1 }
                    4 { set _ 1 }
                    5 { set _ 0 }
                    6 { set _ 0 }
                    7 { set _ 0 }
                    8 { set _ $1 }
                    9 { set _ $1 }
                    13 { puts "DS9 Regions File 4.2" }
                    20 { set globalColor $2 }
                    21 { set globalWidth $2 }
                    22 { set globalFill $2 }
                    23 { set globalDash $2 }
                    24 { set globalFont $2 }
                    25 { set globalText $2 }
                    28 { set localColor $2 }
                    29 { set localWidth $2 }
                    30 { set localFill $2 }
                    31 { set localDash $2 }
                    32 { set localFont $2 }
                    33 { set localText $2 }
                    34 { set localColor $globalColor; set localWidth $globalWidth; set localFill $globalFill; set localDash $globalDash; set localFont $globalFont; set localText $globalText }
                    35 { IllustrateCreateCircle $2 $3 $4 $localColor $localFill $localWidth $localDash }
                    38 { set coords {} }
                    44 { lappend coords $1 $2 }
                }
                unsetupvalues $dc
                # pop off tokens from the stack if normal rule
                if {![info exists rules($rule,e)]} {
                    incr stackpointer -1
                    set state_stack [lrange $state_stack 0 $stackpointer]
                    set value_stack [lrange $value_stack 0 $stackpointer]
                }
                # now do the goto transition
                lappend state_stack $table([lindex $state_stack end]:$ll,target)
                lappend value_stack $_
            }
            accept {
                set accepted 1
            }
            goto -
            default {
                puts stderr "Internal parser error: illegal command $table($state:$token)"
                return 2
            }
        }
    }
    return 0
}

######
# end autogenerated taccle functions
######

